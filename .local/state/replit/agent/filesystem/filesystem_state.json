{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"glow-pulse\": {\n          \"0%, 100%\": {\n            boxShadow: \"0 0 5px hsl(var(--primary)), 0 0 10px hsl(var(--primary)), 0 0 15px hsl(var(--primary))\"\n          },\n          \"50%\": {\n            boxShadow: \"0 0 10px hsl(var(--primary)), 0 0 20px hsl(var(--primary)), 0 0 30px hsl(var(--primary))\"\n          }\n        },\n        \"glow-gold\": {\n          \"0%, 100%\": {\n            boxShadow: \"0 0 5px hsl(var(--accent)), 0 0 10px hsl(var(--accent)), 0 0 15px hsl(var(--accent))\"\n          },\n          \"50%\": {\n            boxShadow: \"0 0 10px hsl(var(--accent)), 0 0 20px hsl(var(--accent)), 0 0 30px hsl(var(--accent))\"\n          }\n        },\n        \"chip-bounce\": {\n          \"0%, 20%, 50%, 80%, 100%\": { transform: \"translateY(0)\" },\n          \"40%\": { transform: \"translateY(-10px)\" },\n          \"60%\": { transform: \"translateY(-5px)\" }\n        },\n        \"card-deal\": {\n          \"0%\": { transform: \"translateX(-100px) rotate(-10deg)\", opacity: \"0\" },\n          \"100%\": { transform: \"translateX(0) rotate(0deg)\", opacity: \"1\" }\n        },\n        \"card-flip\": {\n          \"0%\": { transform: \"rotateY(0deg)\" },\n          \"50%\": { transform: \"rotateY(90deg)\" },\n          \"100%\": { transform: \"rotateY(0deg)\" }\n        },\n        \"float\": {\n          \"0%, 100%\": { transform: \"translateY(0)\" },\n          \"50%\": { transform: \"translateY(-5px)\" }\n        },\n        \"slide-up\": {\n          \"0%\": { transform: \"translateY(100px)\", opacity: \"0\" },\n          \"100%\": { transform: \"translateY(0)\", opacity: \"1\" }\n        },\n        \"fade-in-scale\": {\n          \"0%\": { transform: \"scale(0.8)\", opacity: \"0\" },\n          \"100%\": { transform: \"scale(1)\", opacity: \"1\" }\n        },\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"glow-pulse\": \"glow-pulse 2s ease-in-out infinite\",\n        \"glow-gold\": \"glow-gold 2s ease-in-out infinite\",\n        \"chip-bounce\": \"chip-bounce 0.8s ease-in-out\",\n        \"card-deal\": \"card-deal 0.6s ease-out forwards\",\n        \"card-flip\": \"card-flip 0.8s ease-in-out\",\n        \"float\": \"float 3s ease-in-out infinite\",\n        \"slide-up\": \"slide-up 0.6s ease-out forwards\",\n        \"fade-in-scale\": \"fade-in-scale 0.4s ease-out forwards\",\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4925},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\nimport glsl from \"vite-plugin-glsl\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    glsl(), // Add GLSL shader support\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  // Add support for large models and audio files\n  assetsInclude: [\"**/*.gltf\", \"**/*.glb\", \"**/*.mp3\", \"**/*.ogg\", \"**/*.wav\"],\n});\n","size_bytes":896},"server/auth.ts":{"content":"import express from 'express';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { storage } from './storage';\nimport { z } from 'zod';\n\nconst router = express.Router();\n\n// Validation schemas\nconst registerSchema = z.object({\n  username: z.string().min(3).max(20),\n  password: z.string().min(6).max(100),\n  email: z.string().email().optional(),\n});\n\nconst loginSchema = z.object({\n  username: z.string(),\n  password: z.string(),\n});\n\n// Register new user\nrouter.post('/register', async (req, res) => {\n  try {\n    const { username, password, email } = registerSchema.parse(req.body);\n\n    // Check if user already exists\n    const existingUser = await storage.getUserByUsername(username);\n    if (existingUser) {\n      return res.status(400).json({ message: 'Username already exists' });\n    }\n\n    if (email) {\n      const existingEmail = await storage.getUserByEmail(email);\n      if (existingEmail) {\n        return res.status(400).json({ message: 'Email already exists' });\n      }\n    }\n\n    // Hash password\n    const saltRounds = 12;\n    const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n    // Create user\n    const user = await storage.createUser({\n      username,\n      password: hashedPassword,\n      email: email || null,\n    });\n\n    // Generate JWT token\n    const jwtSecret = process.env.SESSION_SECRET;\n    if (!jwtSecret) {\n      throw new Error('SESSION_SECRET environment variable is required');\n    }\n    \n    const token = jwt.sign(\n      { userId: user.id, username: user.username },\n      jwtSecret,\n      { expiresIn: '7d' }\n    );\n\n    res.status(201).json({\n      message: 'User created successfully',\n      user: {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        balance: user.balance,\n        totalWinnings: user.totalWinnings,\n        totalLosses: user.totalLosses,\n        handsPlayed: user.handsPlayed,\n        handsWon: user.handsWon,\n        gamesPlayed: user.gamesPlayed,\n        gamesWon: user.gamesWon,\n        createdAt: user.createdAt,\n      },\n      token,\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ message: 'Invalid input', errors: error.errors });\n    }\n    console.error('Registration error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// Login user\nrouter.post('/login', async (req, res) => {\n  try {\n    const { username, password } = loginSchema.parse(req.body);\n\n    // Find user\n    const user = await storage.getUserByUsername(username);\n    if (!user) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n\n    // Verify password\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n    if (!isPasswordValid) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n\n    // Generate JWT token\n    const jwtSecret = process.env.SESSION_SECRET;\n    if (!jwtSecret) {\n      throw new Error('SESSION_SECRET environment variable is required');\n    }\n    \n    const token = jwt.sign(\n      { userId: user.id, username: user.username },\n      jwtSecret,\n      { expiresIn: '7d' }\n    );\n\n    res.json({\n      message: 'Login successful',\n      user: {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        balance: user.balance,\n        totalWinnings: user.totalWinnings,\n        totalLosses: user.totalLosses,\n        handsPlayed: user.handsPlayed,\n        handsWon: user.handsWon,\n        gamesPlayed: user.gamesPlayed,\n        gamesWon: user.gamesWon,\n        createdAt: user.createdAt,\n      },\n      token,\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ message: 'Invalid input', errors: error.errors });\n    }\n    console.error('Login error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// Get current user profile\nrouter.get('/profile', authenticateToken, async (req, res) => {\n  try {\n    const userId = (req as any).user.userId;\n    const user = await storage.getUser(userId);\n    \n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    res.json({\n      user: {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        balance: user.balance,\n        totalWinnings: user.totalWinnings,\n        totalLosses: user.totalLosses,\n        handsPlayed: user.handsPlayed,\n        handsWon: user.handsWon,\n        gamesPlayed: user.gamesPlayed,\n        gamesWon: user.gamesWon,\n        createdAt: user.createdAt,\n        updatedAt: user.updatedAt,\n      },\n    });\n  } catch (error) {\n    console.error('Profile error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// Update user balance (for admin or game results)\nrouter.post('/update-balance', authenticateToken, async (req, res) => {\n  try {\n    const userId = (req as any).user.userId;\n    const { balance } = req.body;\n\n    if (typeof balance !== 'string' || isNaN(parseFloat(balance))) {\n      return res.status(400).json({ message: 'Invalid balance amount' });\n    }\n\n    await storage.updateUserBalance(userId, balance);\n    \n    res.json({ message: 'Balance updated successfully' });\n  } catch (error) {\n    console.error('Balance update error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// Verify JWT token for socket authentication\nexport function verifyToken(token: string): { userId: string; username: string } | null {\n  try {\n    const jwtSecret = process.env.SESSION_SECRET;\n    if (!jwtSecret) {\n      throw new Error('SESSION_SECRET environment variable is required');\n    }\n\n    const decoded = jwt.verify(token, jwtSecret) as any;\n    return {\n      userId: decoded.userId,\n      username: decoded.username\n    };\n  } catch (error) {\n    console.error('Token verification failed:', error);\n    return null;\n  }\n}\n\n// Middleware to authenticate JWT token\nexport function authenticateToken(req: express.Request, res: express.Response, next: express.NextFunction) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  const jwtSecret = process.env.SESSION_SECRET;\n  if (!jwtSecret) {\n    return res.status(500).json({ message: 'Server configuration error' });\n  }\n\n  jwt.verify(token, jwtSecret, (err: any, user: any) => {\n    if (err) {\n      return res.status(403).json({ message: 'Invalid or expired token' });\n    }\n    (req as any).user = user;\n    next();\n  });\n}\n\nexport default router;","size_bytes":6691},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\n// 🔧 ENHANCED SERVER STABILITY - Endgültige Lösung für Server-Probleme!\nprocess.on('uncaughtException', (error) => {\n  console.error('🚨 [SERVER-RECOVERY] Uncaught Exception:', error.message);\n  // Log but don't crash - keep server running for production stability\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('🚨 [SERVER-RECOVERY] Unhandled Rejection:', reason);\n  // Log but don't crash - keep server running for production stability\n});\n\n// 🔧 Graceful shutdown handling - PRODUCTION READY\nlet httpServer: any = null;\n\nprocess.on('SIGTERM', () => {\n  console.log('📡 [SERVER] Received SIGTERM, graceful shutdown...');\n  gracefulShutdown();\n});\n\nprocess.on('SIGINT', () => {\n  console.log('📡 [SERVER] Received SIGINT, graceful shutdown...');\n  gracefulShutdown();\n});\n\nconst gracefulShutdown = () => {\n  if (httpServer) {\n    console.log('🔄 [SERVER] Closing HTTP server gracefully...');\n    httpServer.close((err: any) => {\n      if (err) {\n        console.error('❌ [SERVER] Error during graceful shutdown:', err);\n        process.exit(1);\n      } else {\n        console.log('✅ [SERVER] Graceful shutdown completed');\n        process.exit(0);\n      }\n    });\n    \n    // Force exit after 10 seconds if graceful shutdown takes too long\n    setTimeout(() => {\n      console.error('⏰ [SERVER] Force exit - graceful shutdown timeout');\n      process.exit(1);\n    }, 10000);\n  } else {\n    process.exit(0);\n  }\n};\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client\n  const port = 5000;\n  \n  // 🔧 ENHANCED SERVER STARTUP mit Retry-Logic - PRODUCTION READY\n  const startServer = () => {\n    try {\n      const serverInstance = server.listen({\n        port,\n        host: \"0.0.0.0\",\n        reusePort: true,\n      }, () => {\n        log(`🚀 [SERVER-STABLE] serving on port ${port}`);\n        console.log(`✅ [SERVER-HEALTH] Server successfully started at ${new Date().toISOString()}`);\n      });\n\n      // Store server reference for graceful shutdown\n      httpServer = serverInstance;\n\n      // Remove existing error listeners to prevent duplicates\n      serverInstance.removeAllListeners('error');\n      \n      serverInstance.on('error', (error: any) => {\n        if (error.code === 'EADDRINUSE') {\n          console.error(`🚨 [SERVER] Port ${port} in use, retrying in 2 seconds...`);\n          setTimeout(() => {\n            serverInstance.close();\n            startServer();\n          }, 2000);\n        } else {\n          console.error('🚨 [SERVER-ERROR]:', error);\n        }\n      });\n      \n    } catch (error) {\n      console.error('🚨 [SERVER-STARTUP-ERROR]:', error);\n      // Retry after 3 seconds\n      setTimeout(startServer, 3000);\n    }\n  };\n\n  startServer();\n})();\n","size_bytes":4412},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { Server as SocketIOServer } from \"socket.io\";\nimport { storage } from \"./storage\";\nimport { PokerSocketHandler } from \"./poker/socketHandlers\";\nimport authRoutes from \"./auth\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  // Authentication routes\n  app.use(\"/api/auth\", authRoutes);\n\n  // Get user stats endpoint (for future user system integration)\n  app.get(\"/api/user/:id\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // Setup Socket.IO for real-time poker game functionality\n  const io = new SocketIOServer(httpServer, {\n    cors: {\n      origin: process.env.NODE_ENV === \"production\" ? false : [\"http://localhost:5000\"],\n      methods: [\"GET\", \"POST\"]\n    },\n    transports: [\"websocket\", \"polling\"]\n  });\n\n  // Initialize poker socket handlers\n  new PokerSocketHandler(io);\n\n  return httpServer;\n}\n","size_bytes":1433},"server/storage.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { eq } from \"drizzle-orm\";\nimport { \n  users, \n  gameHistory,\n  handHistory,\n  transactions,\n  tournaments,\n  tournamentPlayers,\n  type User, \n  type InsertUser,\n  type GameHistory,\n  type HandHistory,\n  type Transaction,\n  type Tournament,\n  type TournamentPlayer\n} from \"@shared/schema\";\n\n// Database connection\nconst sql = neon(process.env.DATABASE_URL!);\nexport const db = drizzle(sql);\n\nexport interface IStorage {\n  // User management\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserBalance(userId: number, newBalance: string): Promise<void>;\n  updateUserStats(userId: number, stats: Partial<User>): Promise<void>;\n  \n  // Game history\n  createGameHistory(game: Omit<GameHistory, 'id' | 'startedAt'>): Promise<GameHistory>;\n  getGameHistory(userId: number, limit?: number): Promise<GameHistory[]>;\n  updateGameHistory(gameId: number, updates: Partial<GameHistory>): Promise<void>;\n  \n  // Hand history\n  createHandHistory(hand: Omit<HandHistory, 'id' | 'timestamp'>): Promise<HandHistory>;\n  getHandHistory(gameId: number): Promise<HandHistory[]>;\n  getUserHandHistory(userId: number, limit?: number): Promise<HandHistory[]>;\n  \n  // Transactions\n  createTransaction(transaction: Omit<Transaction, 'id' | 'createdAt'>): Promise<Transaction>;\n  getUserTransactions(userId: number, limit?: number): Promise<Transaction[]>;\n  \n  // Tournaments\n  createTournament(tournament: Omit<Tournament, 'id' | 'createdAt'>): Promise<Tournament>;\n  getTournaments(status?: string): Promise<Tournament[]>;\n  updateTournament(tournamentId: number, updates: Partial<Tournament>): Promise<void>;\n  joinTournament(tournamentId: number, userId: number): Promise<TournamentPlayer>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User management\n  async getUser(id: number): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values({\n      ...insertUser,\n      balance: \"1000.00\", // Starting balance\n      totalWinnings: \"0.00\",\n      totalLosses: \"0.00\",\n      handsPlayed: 0,\n      handsWon: 0,\n      gamesPlayed: 0,\n      gamesWon: 0,\n    }).returning();\n    return result[0];\n  }\n\n  async updateUserBalance(userId: number, newBalance: string): Promise<void> {\n    await db.update(users)\n      .set({ balance: newBalance, updatedAt: new Date() })\n      .where(eq(users.id, userId));\n  }\n\n  async updateUserStats(userId: number, stats: Partial<User>): Promise<void> {\n    await db.update(users)\n      .set({ ...stats, updatedAt: new Date() })\n      .where(eq(users.id, userId));\n  }\n\n  // Game history\n  async createGameHistory(game: Omit<GameHistory, 'id' | 'startedAt'>): Promise<GameHistory> {\n    const result = await db.insert(gameHistory).values(game).returning();\n    return result[0];\n  }\n\n  async getGameHistory(userId: number, limit = 50): Promise<GameHistory[]> {\n    return await db.select().from(gameHistory)\n      .where(eq(gameHistory.winnerId, userId))\n      .orderBy(gameHistory.startedAt)\n      .limit(limit);\n  }\n\n  async updateGameHistory(gameId: number, updates: Partial<GameHistory>): Promise<void> {\n    await db.update(gameHistory)\n      .set(updates)\n      .where(eq(gameHistory.id, gameId));\n  }\n\n  // Hand history\n  async createHandHistory(hand: Omit<HandHistory, 'id' | 'timestamp'>): Promise<HandHistory> {\n    const result = await db.insert(handHistory).values(hand).returning();\n    return result[0];\n  }\n\n  async getHandHistory(gameId: number): Promise<HandHistory[]> {\n    return await db.select().from(handHistory)\n      .where(eq(handHistory.gameId, gameId))\n      .orderBy(handHistory.handNumber);\n  }\n\n  async getUserHandHistory(userId: number, limit = 100): Promise<HandHistory[]> {\n    return await db.select().from(handHistory)\n      .where(eq(handHistory.playerId, userId))\n      .orderBy(handHistory.timestamp)\n      .limit(limit);\n  }\n\n  // Transactions\n  async createTransaction(transaction: Omit<Transaction, 'id' | 'createdAt'>): Promise<Transaction> {\n    const result = await db.insert(transactions).values(transaction).returning();\n    return result[0];\n  }\n\n  async getUserTransactions(userId: number, limit = 50): Promise<Transaction[]> {\n    return await db.select().from(transactions)\n      .where(eq(transactions.userId, userId))\n      .orderBy(transactions.createdAt)\n      .limit(limit);\n  }\n\n  // Tournaments\n  async createTournament(tournament: Omit<Tournament, 'id' | 'createdAt'>): Promise<Tournament> {\n    const result = await db.insert(tournaments).values(tournament).returning();\n    return result[0];\n  }\n\n  async getTournaments(status?: string): Promise<Tournament[]> {\n    if (status) {\n      return await db.select().from(tournaments)\n        .where(eq(tournaments.status, status))\n        .orderBy(tournaments.createdAt);\n    }\n    return await db.select().from(tournaments).orderBy(tournaments.createdAt);\n  }\n\n  async updateTournament(tournamentId: number, updates: Partial<Tournament>): Promise<void> {\n    await db.update(tournaments)\n      .set(updates)\n      .where(eq(tournaments.id, tournamentId));\n  }\n\n  async joinTournament(tournamentId: number, userId: number): Promise<TournamentPlayer> {\n    const result = await db.insert(tournamentPlayers).values({\n      tournamentId,\n      userId,\n      chipCount: 1000, // Starting chips\n      isEliminated: false,\n    }).returning();\n    return result[0];\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":6189},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger, type ServerOptions } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions: ServerOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2409},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, decimal, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").unique(),\n  balance: decimal(\"balance\", { precision: 10, scale: 2 }).default(\"0.00\").notNull(),\n  totalWinnings: decimal(\"total_winnings\", { precision: 12, scale: 2 }).default(\"0.00\").notNull(),\n  totalLosses: decimal(\"total_losses\", { precision: 12, scale: 2 }).default(\"0.00\").notNull(),\n  handsPlayed: integer(\"hands_played\").default(0).notNull(),\n  handsWon: integer(\"hands_won\").default(0).notNull(),\n  gamesPlayed: integer(\"games_played\").default(0).notNull(),\n  gamesWon: integer(\"games_won\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const gameHistory = pgTable(\"game_history\", {\n  id: serial(\"id\").primaryKey(),\n  roomId: text(\"room_id\").notNull(),\n  roomName: text(\"room_name\").notNull(),\n  playerIds: jsonb(\"player_ids\").notNull(), // Array of player IDs\n  playerNames: jsonb(\"player_names\").notNull(), // Array of player names\n  winnerId: integer(\"winner_id\"),\n  winnerName: text(\"winner_name\"),\n  pot: decimal(\"pot\", { precision: 10, scale: 2 }).notNull(),\n  blinds: jsonb(\"blinds\").notNull(), // {small: number, big: number}\n  duration: integer(\"duration\"), // Game duration in seconds\n  rounds: integer(\"rounds\").default(1).notNull(),\n  startedAt: timestamp(\"started_at\").defaultNow().notNull(),\n  endedAt: timestamp(\"ended_at\"),\n});\n\nexport const handHistory = pgTable(\"hand_history\", {\n  id: serial(\"id\").primaryKey(),\n  gameId: integer(\"game_id\").references(() => gameHistory.id),\n  handNumber: integer(\"hand_number\").notNull(),\n  playerId: integer(\"player_id\"),\n  playerName: text(\"player_name\").notNull(),\n  holeCards: jsonb(\"hole_cards\").notNull(), // Player's 2 cards\n  communityCards: jsonb(\"community_cards\").notNull(), // 5 community cards\n  finalHand: text(\"final_hand\"), // Best hand description\n  actions: jsonb(\"actions\").notNull(), // Array of actions taken\n  finalBet: decimal(\"final_bet\", { precision: 10, scale: 2 }).default(\"0.00\").notNull(),\n  winAmount: decimal(\"win_amount\", { precision: 10, scale: 2 }).default(\"0.00\").notNull(),\n  isWinner: boolean(\"is_winner\").default(false).notNull(),\n  isFolded: boolean(\"is_folded\").default(false).notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  type: text(\"type\").notNull(), // 'deposit', 'withdrawal', 'win', 'loss', 'buyin'\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  description: text(\"description\"),\n  stripeTransactionId: text(\"stripe_transaction_id\"),\n  status: text(\"status\").default(\"completed\").notNull(), // 'pending', 'completed', 'failed'\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const tournaments = pgTable(\"tournaments\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  buyIn: decimal(\"buy_in\", { precision: 10, scale: 2 }).notNull(),\n  prizePool: decimal(\"prize_pool\", { precision: 12, scale: 2 }).default(\"0.00\").notNull(),\n  maxPlayers: integer(\"max_players\").notNull(),\n  currentPlayers: integer(\"current_players\").default(0).notNull(),\n  status: text(\"status\").default(\"waiting\").notNull(), // 'waiting', 'active', 'completed'\n  blindStructure: jsonb(\"blind_structure\").notNull(), // Array of blind levels\n  currentBlindLevel: integer(\"current_blind_level\").default(0).notNull(),\n  winnerId: integer(\"winner_id\"),\n  startedAt: timestamp(\"started_at\"),\n  endedAt: timestamp(\"ended_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const tournamentPlayers = pgTable(\"tournament_players\", {\n  id: serial(\"id\").primaryKey(),\n  tournamentId: integer(\"tournament_id\").references(() => tournaments.id).notNull(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  position: integer(\"position\"), // Final ranking\n  chipCount: integer(\"chip_count\").default(0).notNull(),\n  isEliminated: boolean(\"is_eliminated\").default(false).notNull(),\n  eliminatedAt: timestamp(\"eliminated_at\"),\n  joinedAt: timestamp(\"joined_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n});\n\nexport const insertGameHistorySchema = createInsertSchema(gameHistory);\nexport const insertHandHistorySchema = createInsertSchema(handHistory);\nexport const insertTransactionSchema = createInsertSchema(transactions);\nexport const insertTournamentSchema = createInsertSchema(tournaments);\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type GameHistory = typeof gameHistory.$inferSelect;\nexport type HandHistory = typeof handHistory.$inferSelect;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type Tournament = typeof tournaments.$inferSelect;\nexport type TournamentPlayer = typeof tournamentPlayers.$inferSelect;\n","size_bytes":5345},"shared/types.ts":{"content":"export interface Card {\n  suit: 'hearts' | 'diamonds' | 'clubs' | 'spades';\n  rank: 'A' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | 'J' | 'Q' | 'K';\n  id: string;\n}\n\nexport interface Player {\n  id: string; // socket ID for real-time communication\n  userId?: number; // database user ID for persistence\n  name: string;\n  chips: number;\n  cards: Card[];\n  currentBet: number;\n  totalBet: number;\n  position: number;\n  isActive: boolean;\n  isFolded: boolean;\n  isAllIn: boolean;\n  lastAction?: 'fold' | 'call' | 'raise' | 'check' | 'bet' | 'all-in';\n}\n\nexport interface GameState {\n  id: string;\n  players: Player[];\n  communityCards: Card[];\n  pot: number;\n  currentBet: number;\n  currentPlayerIndex: number;\n  dealerIndex: number;\n  smallBlindIndex: number;\n  bigBlindIndex: number;\n  phase: 'waiting' | 'preflop' | 'flop' | 'turn' | 'river' | 'showdown' | 'ended';\n  round: number;\n  blinds: {\n    small: number;\n    big: number;\n  };\n  maxPlayers: number;\n  minPlayers: number;\n  isStarted: boolean;\n  winners?: {\n    playerId: string;\n    hand: string;\n    amount: number;\n  }[];\n  // Ironic Events\n  lastIronicEvent?: IronicEventNotification;\n  activeSpecialEffects?: string[];\n  rouletteResult?: number;\n}\n\nexport interface IronicEventNotification {\n  id: string;\n  name: string;\n  nameDE: string;\n  description: string;\n  descriptionDE: string;\n  timestamp: number;\n  affectedPlayers?: string[];\n  specialEffect?: string;\n}\n\nexport interface Room {\n  id: string;\n  name: string;\n  maxPlayers: number;\n  currentPlayers: number;\n  blinds: {\n    small: number;\n    big: number;\n  };\n  buyIn: number;\n  isPrivate: boolean;\n  password?: string;\n  isSinglePlayer?: boolean;\n  gameState?: GameState;\n}\n\nexport interface PokerAction {\n  type: 'fold' | 'call' | 'raise' | 'check' | 'bet' | 'all-in';\n  amount?: number;\n  playerId: string;\n}\n\nexport interface HandRanking {\n  rank: number;\n  name: string;\n  cards: Card[];\n  tiebreakers: number[];\n}\n\nexport interface TournamentBlindLevel {\n  level: number;\n  smallBlind: number;\n  bigBlind: number;\n  duration: number; // in minutes\n}\n\nexport interface Tournament {\n  id: string;\n  name: string;\n  buyIn: number;\n  prizePool: number;\n  maxPlayers: number;\n  currentPlayers: number;\n  status: 'waiting' | 'active' | 'completed';\n  blindStructure: TournamentBlindLevel[];\n  currentBlindLevel: number;\n  winnerId?: string;\n  startedAt?: Date;\n  endedAt?: Date;\n  createdAt: Date;\n  participants: TournamentPlayer[];\n}\n\nexport interface TournamentPlayer {\n  userId: string;\n  username: string;\n  chipCount: number;\n  position?: number;\n  isEliminated: boolean;\n  eliminatedAt?: Date;\n  joinedAt: Date;\n}\n\nexport interface TournamentState extends Tournament {\n  currentTable?: GameState;\n  nextBlindIncrease?: Date;\n  payoutStructure: { position: number; percentage: number }[];\n}\n","size_bytes":2835},"client/src/App.tsx":{"content":"import React, { useEffect } from 'react';\nimport { usePoker } from './lib/stores/usePoker';\nimport { useLanguage } from './lib/stores/useLanguage';\nimport { socketClient } from './lib/socketClient';\nimport Lobby from './components/poker/Lobby';\nimport PokerTable from './components/poker/PokerTable';\nimport GameUI from './components/poker/GameUI';\nimport { LanguageSwitcher } from './components/ui/LanguageSwitcher';\nimport '@fontsource/inter';\nimport './index.css';\n\nfunction App() {\n  const { \n    showLobby, \n    currentRoom, \n    gameState,\n    setConnected,\n    setRooms,\n    setCurrentRoom,\n    setGameState,\n    setPlayers,\n    setMyCards,\n    setShowLobby\n  } = usePoker();\n  \n  const { t } = useLanguage();\n\n  useEffect(() => {\n    // Initialize socket connection\n    const initializeSocket = async () => {\n      try {\n        await socketClient.connect();\n        setConnected(true);\n\n        // Set up socket event listeners\n        socketClient.onRoomsList((rooms) => {\n          setRooms(rooms);\n        });\n\n        socketClient.onJoinedRoom((data) => {\n          setCurrentRoom(data.room);\n          setPlayers(data.players);\n          if (data.gameState) {\n            setGameState(data.gameState);\n          }\n        });\n\n        socketClient.onPlayerJoined((data) => {\n          setCurrentRoom(data.room);\n        });\n\n        socketClient.onPlayerLeft((data) => {\n          setCurrentRoom(data.room);\n        });\n\n        socketClient.onGameStarted((gameState) => {\n          setGameState(gameState);\n        });\n\n        socketClient.onGameUpdated((gameState) => {\n          setGameState(gameState);\n        });\n\n        socketClient.onPlayerAction((data) => {\n          console.log('Player action received:', data.action);\n          setGameState(data.gameState);\n        });\n\n        socketClient.onPrivateCards((cards) => {\n          setMyCards(cards);\n        });\n\n        socketClient.onError((error) => {\n          console.error('Socket error:', error);\n          alert(error.message);\n        });\n\n      } catch (error) {\n        console.error('Failed to connect to server:', error);\n        setConnected(false);\n      }\n    };\n\n    initializeSocket();\n\n    // Cleanup on unmount\n    return () => {\n      socketClient.disconnect();\n    };\n  }, [setConnected, setRooms, setCurrentRoom, setGameState, setPlayers, setMyCards]);\n\n  // Handle leaving room\n  const handleLeaveRoom = () => {\n    socketClient.leaveRoom();\n    setCurrentRoom(null);\n    setGameState(null);\n    setMyCards([]);\n    setShowLobby(true);\n  };\n\n  if (showLobby || !currentRoom) {\n    return (\n      <div className=\"relative\">\n        {/* Language switcher in top right */}\n        <div className=\"absolute top-4 right-4 z-50\">\n          <LanguageSwitcher />\n        </div>\n        <Lobby />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full h-screen relative overflow-hidden\">\n      {/* Language switcher and back to lobby button */}\n      <div className=\"absolute top-4 right-4 z-50 flex items-center gap-3\">\n        <LanguageSwitcher />\n        <button\n          onClick={handleLeaveRoom}\n          className=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors\"\n        >\n          {t('leaveRoom')}\n        </button>\n      </div>\n\n      {/* Poker table */}\n      <PokerTable />\n\n      {/* Game controls */}\n      {gameState && gameState.isStarted && (\n        <GameUI />\n      )}\n\n      {/* Room info and start game button */}\n      {currentRoom && (!gameState || !gameState.isStarted) && (\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-black bg-opacity-90 rounded-lg p-6 text-white text-center\">\n          <h2 className=\"text-2xl font-bold mb-4\">{currentRoom.name}</h2>\n          <div className=\"mb-4\">\n            <div>{t('players')}: {currentRoom.currentPlayers}/{currentRoom.maxPlayers}</div>\n            <div>{t('buyIn').replace(' ($)', '')}: ${currentRoom.buyIn?.toLocaleString()}</div>\n            <div>{t('blinds')}: ${currentRoom.blinds?.small}/${currentRoom.blinds?.big}</div>\n          </div>\n          \n          {currentRoom.currentPlayers >= 3 && (\n            <button\n              onClick={() => socketClient.startGame()}\n              className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-bold transition-colors\"\n            >\n              {t('startGame')}\n            </button>\n          )}\n          \n          {currentRoom.currentPlayers < 3 && (\n            <div className=\"text-gray-400\">\n              {t('waitingForGame')}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","size_bytes":4660},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    /* 🎰 BOJEK POKER GAMING THEME 🎲 */\n    /* Dark gaming backgrounds */\n    --background: 210 40% 8%;  /* Deep dark blue-gray */\n    --foreground: 213 31% 91%; /* Light cream white */\n    \n    /* Primary gaming colors - Electric blue */\n    --primary: 217 91% 60%;     /* Bright electric blue */\n    --primary-foreground: 210 40% 8%;\n    \n    /* Secondary - Purple accent */\n    --secondary: 262 83% 58%;   /* Electric purple */\n    --secondary-foreground: 213 31% 91%;\n    \n    /* Muted backgrounds */\n    --muted: 210 40% 12%;       /* Slightly lighter than bg */\n    --muted-foreground: 215 20% 65%; /* Gray text */\n    \n    /* Card backgrounds */\n    --card: 210 40% 10%;        /* Card backgrounds */\n    --card-foreground: 213 31% 91%;\n    \n    /* Accent - Gold highlights */\n    --accent: 45 93% 58%;       /* Bright gold */\n    --accent-foreground: 210 40% 8%;\n    \n    /* Destructive - Red danger */\n    --destructive: 0 84% 60%;   /* Bright red */\n    --destructive-foreground: 213 31% 91%;\n    \n    /* Borders */\n    --border: 210 40% 18%;      /* Subtle borders */\n    --input: 210 40% 18%;       /* Input borders */\n    --ring: 217 91% 60%;        /* Focus rings */\n    \n    /* Popover */\n    --popover: 210 40% 10%;\n    --popover-foreground: 213 31% 91%;\n    \n    /* Charts - Gaming colors */\n    --chart-1: 217 91% 60%;     /* Electric blue */\n    --chart-2: 262 83% 58%;     /* Purple */\n    --chart-3: 45 93% 58%;      /* Gold */\n    --chart-4: 142 76% 36%;     /* Green */\n    --chart-5: 0 84% 60%;       /* Red */\n    \n    /* Sidebar */\n    --sidebar-background: 210 40% 8%;\n    --sidebar-foreground: 213 31% 91%;\n    --sidebar-primary: 217 91% 60%;\n    --sidebar-primary-foreground: 210 40% 8%;\n    --sidebar-accent: 210 40% 12%;\n    --sidebar-accent-foreground: 213 31% 91%;\n    --sidebar-border: 210 40% 18%;\n    --sidebar-ring: 217 91% 60%;\n    \n    /* Border radius */\n    --radius: 0.75rem; /* Slightly more rounded for modern look */\n  }\n  \n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    width: 100vw;\n    height: 100vh;\n    /* Gaming background gradient */\n    background: linear-gradient(135deg, hsl(210, 40%, 8%) 0%, hsl(210, 40%, 5%) 50%, hsl(262, 83%, 8%) 100%);\n  }\n  \n  /* 🎰 Gaming-style scrollbars */\n  ::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n  \n  ::-webkit-scrollbar-track {\n    background: hsl(var(--muted));\n    border-radius: 4px;\n  }\n  \n  ::-webkit-scrollbar-thumb {\n    background: hsl(var(--primary));\n    border-radius: 4px;\n  }\n  \n  ::-webkit-scrollbar-thumb:hover {\n    background: hsl(var(--accent));\n  }\n}\n\n#root {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n}\n\ncanvas {\n  width: 100% !important;\n  height: 100% !important;\n  touch-action: none;\n}","size_bytes":2932},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/poker/gameLogic.ts":{"content":"import { Card, Player, GameState, PokerAction, HandRanking } from '@shared/types';\nimport { HandEvaluator } from './handEvaluator';\nimport { BotPlayer } from './botPlayer';\nimport { IronicEventEngine, IronicEventResult } from './ironicEvents';\n\nexport class PokerGame {\n  private deck: Card[] = [];\n  private gameState: GameState;\n  private bots: Map<string, BotPlayer> = new Map();\n  private botActionCallback?: (action: PokerAction) => void;\n  private botActionPending = false;\n  private eventCallback?: (event: any) => void;\n\n  constructor(roomId: string, players: Player[], blinds: { small: number; big: number }, bots?: BotPlayer[]) {\n    this.gameState = {\n      id: roomId,\n      players: players.map((p, index) => ({\n        ...p,\n        position: index,\n        cards: [],\n        currentBet: 0,\n        totalBet: 0,\n        isActive: true,\n        isFolded: false,\n        isAllIn: false\n      })),\n      communityCards: [],\n      pot: 0,\n      currentBet: 0,\n      currentPlayerIndex: 0,\n      dealerIndex: 0,\n      smallBlindIndex: 1,\n      bigBlindIndex: 2,\n      phase: 'waiting',\n      round: 1,\n      blinds,\n      maxPlayers: 6,\n      minPlayers: 3,\n      isStarted: false\n    };\n    \n    // Add bots to the bot map\n    if (bots) {\n      bots.forEach(bot => {\n        this.bots.set(bot.id, bot);\n      });\n    }\n    \n    this.initializeDeck();\n  }\n\n  private initializeDeck(): void {\n    const suits: Card['suit'][] = ['hearts', 'diamonds', 'clubs', 'spades'];\n    const ranks: Card['rank'][] = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n    \n    this.deck = [];\n    suits.forEach(suit => {\n      ranks.forEach(rank => {\n        this.deck.push({\n          suit,\n          rank,\n          id: `${suit}_${rank}`\n        });\n      });\n    });\n    \n    this.shuffleDeck();\n  }\n\n  private shuffleDeck(): void {\n    for (let i = this.deck.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [this.deck[i], this.deck[j]] = [this.deck[j], this.deck[i]];\n    }\n  }\n\n  public startGame(): GameState {\n    if (this.gameState.players.length < this.gameState.minPlayers) {\n      throw new Error('Not enough players to start the game');\n    }\n\n    // Reset bot action flag on game start\n    this.botActionPending = false;\n    \n    this.gameState.isStarted = true;\n    this.gameState.phase = 'preflop';\n    this.postBlinds();\n    this.dealHoleCards();\n    this.gameState.currentPlayerIndex = this.getNextActivePlayerIndex(this.gameState.bigBlindIndex);\n    \n    // Check if first player is a bot and trigger action\n    if (this.needsBotAction()) {\n      setTimeout(() => this.processBotAction(), 1000);\n    }\n    \n    return this.gameState;\n  }\n\n  private postBlinds(): void {\n    const smallBlindPlayer = this.gameState.players[this.gameState.smallBlindIndex];\n    const bigBlindPlayer = this.gameState.players[this.gameState.bigBlindIndex];\n\n    // Post small blind\n    const smallBlindAmount = Math.min(this.gameState.blinds.small, smallBlindPlayer.chips);\n    smallBlindPlayer.chips -= smallBlindAmount;\n    smallBlindPlayer.currentBet = smallBlindAmount;\n    smallBlindPlayer.totalBet = smallBlindAmount;\n    this.gameState.pot += smallBlindAmount;\n\n    // Post big blind\n    const bigBlindAmount = Math.min(this.gameState.blinds.big, bigBlindPlayer.chips);\n    bigBlindPlayer.chips -= bigBlindAmount;\n    bigBlindPlayer.currentBet = bigBlindAmount;\n    bigBlindPlayer.totalBet = bigBlindAmount;\n    this.gameState.pot += bigBlindAmount;\n    this.gameState.currentBet = bigBlindAmount;\n\n    // Check if players are all-in after posting blinds\n    if (smallBlindPlayer.chips === 0) smallBlindPlayer.isAllIn = true;\n    if (bigBlindPlayer.chips === 0) bigBlindPlayer.isAllIn = true;\n  }\n\n  private dealHoleCards(): void {\n    for (let i = 0; i < 2; i++) {\n      this.gameState.players.forEach(player => {\n        if (player.isActive && !player.isFolded) {\n          player.cards.push(this.deck.pop()!);\n        }\n      });\n    }\n  }\n\n  public processAction(action: PokerAction): GameState {\n    const player = this.gameState.players.find(p => p.id === action.playerId);\n    \n    if (!player || !player.isActive || player.isFolded) {\n      throw new Error('Invalid player or player cannot act');\n    }\n\n    if (this.gameState.players[this.gameState.currentPlayerIndex].id !== action.playerId) {\n      throw new Error('Not player\\'s turn');\n    }\n\n    switch (action.type) {\n      case 'fold':\n        this.processFold(player);\n        break;\n      case 'call':\n        this.processCall(player);\n        break;\n      case 'raise':\n      case 'bet':\n        this.processRaise(player, action.amount!);\n        break;\n      case 'check':\n        this.processCheck(player);\n        break;\n      case 'all-in':\n        this.processAllIn(player);\n        break;\n    }\n\n    player.lastAction = action.type;\n    this.moveToNextPlayer();\n    \n    if (this.isBettingRoundComplete()) {\n      this.advancePhase();\n    } else {\n      // Trigger bot action if new current player is a bot and no bot action is pending\n      if (this.needsBotAction() && !this.botActionPending) {\n        setTimeout(() => this.processBotAction(), 1000);\n      }\n    }\n\n    return this.gameState;\n  }\n\n  private processFold(player: Player): void {\n    player.isFolded = true;\n    player.isActive = false;\n  }\n\n  private processCall(player: Player): void {\n    const callAmount = Math.min(\n      this.gameState.currentBet - player.currentBet,\n      player.chips\n    );\n    \n    player.chips -= callAmount;\n    player.currentBet += callAmount;\n    player.totalBet += callAmount;\n    this.gameState.pot += callAmount;\n\n    if (player.chips === 0) {\n      player.isAllIn = true;\n    }\n  }\n\n  private processRaise(player: Player, amount: number): void {\n    const totalBet = this.gameState.currentBet + amount;\n    const betAmount = Math.min(totalBet - player.currentBet, player.chips);\n    \n    player.chips -= betAmount;\n    player.currentBet += betAmount;\n    player.totalBet += betAmount;\n    this.gameState.pot += betAmount;\n    this.gameState.currentBet = player.currentBet;\n\n    if (player.chips === 0) {\n      player.isAllIn = true;\n    }\n  }\n\n  private processCheck(player: Player): void {\n    if (player.currentBet < this.gameState.currentBet) {\n      throw new Error('Cannot check - must call or fold');\n    }\n  }\n\n  private processAllIn(player: Player): void {\n    const allInAmount = player.chips;\n    player.chips = 0;\n    player.currentBet += allInAmount;\n    player.totalBet += allInAmount;\n    this.gameState.pot += allInAmount;\n    player.isAllIn = true;\n\n    if (player.currentBet > this.gameState.currentBet) {\n      this.gameState.currentBet = player.currentBet;\n    }\n  }\n\n  private moveToNextPlayer(): void {\n    this.gameState.currentPlayerIndex = this.getNextActivePlayerIndex(this.gameState.currentPlayerIndex);\n  }\n\n  private getNextActivePlayerIndex(startIndex: number): number {\n    let nextIndex = (startIndex + 1) % this.gameState.players.length;\n    \n    while (nextIndex !== startIndex) {\n      const player = this.gameState.players[nextIndex];\n      if (player.isActive && !player.isFolded && !player.isAllIn) {\n        return nextIndex;\n      }\n      nextIndex = (nextIndex + 1) % this.gameState.players.length;\n    }\n    \n    return startIndex; // Return original if no active players found\n  }\n\n  private isBettingRoundComplete(): boolean {\n    const activePlayers = this.gameState.players.filter(p => \n      p.isActive && !p.isFolded && !p.isAllIn\n    );\n\n    if (activePlayers.length <= 1) return true;\n\n    // Check if all active players have matching bets\n    const currentBet = this.gameState.currentBet;\n    const allHaveMatchingBets = activePlayers.every(player => \n      player.currentBet === currentBet\n    );\n    \n    if (!allHaveMatchingBets) return false;\n    \n    // ROBUST: Check if all active players have acted since phase started\n    // Players who folded/went all-in don't block the round\n    const playersWhoNeedToAct = activePlayers.filter(p => \n      p.isActive && !p.isFolded && !p.isAllIn\n    );\n    \n    const allActivePlayersHaveActed = playersWhoNeedToAct.every(player => \n      player.lastAction !== undefined\n    );\n    \n    return allActivePlayersHaveActed;\n  }\n\n  private advancePhase(): void {\n    // Reset current bets and actions for next round\n    this.gameState.players.forEach(player => {\n      player.currentBet = 0;\n      player.lastAction = undefined; // Clear last action for new round\n    });\n    this.gameState.currentBet = 0;\n\n    switch (this.gameState.phase) {\n      case 'preflop':\n        this.gameState.phase = 'flop';\n        this.dealCommunityCards(3);\n        break;\n      case 'flop':\n        this.gameState.phase = 'turn';\n        this.dealCommunityCards(1);\n        break;\n      case 'turn':\n        this.gameState.phase = 'river';\n        this.dealCommunityCards(1);\n        break;\n      case 'river':\n        this.gameState.phase = 'showdown';\n        this.determineWinners();\n        return;\n    }\n\n    // Set next player to act (first active player after dealer)\n    this.gameState.currentPlayerIndex = this.getNextActivePlayerIndex(this.gameState.dealerIndex);\n    \n    // Trigger bot action if new current player is a bot and no bot action is pending\n    if (this.needsBotAction() && !this.botActionPending) {\n      setTimeout(() => this.processBotAction(), 1000);\n    }\n  }\n\n  private dealCommunityCards(count: number): void {\n    for (let i = 0; i < count; i++) {\n      this.gameState.communityCards.push(this.deck.pop()!);\n    }\n  }\n\n  private determineWinners(): void {\n    const activePlayers = this.gameState.players.filter(p => !p.isFolded);\n    \n    if (activePlayers.length === 1) {\n      // Only one player left - they win the pot\n      this.gameState.winners = [{\n        playerId: activePlayers[0].id,\n        hand: 'Winner by default',\n        amount: this.gameState.pot\n      }];\n      activePlayers[0].chips += this.gameState.pot;\n    } else {\n      // Evaluate hands for showdown\n      const handEvaluations = activePlayers.map(player => ({\n        player,\n        hand: HandEvaluator.evaluateHand([...player.cards, ...this.gameState.communityCards])\n      }));\n\n      // Sort by hand strength (best first)\n      handEvaluations.sort((a, b) => HandEvaluator.compareHands(b.hand, a.hand));\n\n      // Group players by hand strength for side pots\n      const winners = [handEvaluations[0]];\n      for (let i = 1; i < handEvaluations.length; i++) {\n        if (HandEvaluator.compareHands(handEvaluations[i].hand, handEvaluations[0].hand) === 0) {\n          winners.push(handEvaluations[i]);\n        } else {\n          break;\n        }\n      }\n\n      // Distribute pot among winners\n      const potShare = Math.floor(this.gameState.pot / winners.length);\n      this.gameState.winners = winners.map(({ player, hand }) => {\n        player.chips += potShare;\n        return {\n          playerId: player.id,\n          hand: hand.name,\n          amount: potShare\n        };\n      });\n    }\n\n    this.gameState.phase = 'ended';\n  }\n\n  public getGameState(): GameState {\n    return { ...this.gameState };\n  }\n\n  /**\n   * Set callback for bot actions (used by socket handler)\n   */\n  public setBotActionCallback(callback: (action: PokerAction) => void): void {\n    this.botActionCallback = callback;\n  }\n\n  /**\n   * Check if current player is a bot\n   */\n  public isCurrentPlayerBot(): boolean {\n    const currentPlayer = this.gameState.players[this.gameState.currentPlayerIndex];\n    return this.bots.has(currentPlayer.id);\n  }\n\n  /**\n   * Process bot action automatically\n   */\n  public processBotAction(): void {\n    if (this.botActionPending) return;\n    \n    const currentPlayer = this.gameState.players[this.gameState.currentPlayerIndex];\n    const bot = this.bots.get(currentPlayer.id);\n    \n    if (!bot) return;\n\n    // Set flag to prevent concurrent bot actions\n    this.botActionPending = true;\n\n    // Bot makes decision\n    const action = bot.makeDecision(this.gameState, currentPlayer.id);\n    \n    // Simulate thinking time (500ms to 2s)\n    const thinkingTime = 500 + Math.random() * 1500;\n    \n    setTimeout(() => {\n      try {\n        this.processAction(action);\n        // Notify via callback if set (for socket updates)\n        if (this.botActionCallback) {\n          this.botActionCallback(action);\n        }\n      } catch (error) {\n        console.error('Bot action failed:', error);\n        // Fallback to fold if action fails\n        const foldAction: PokerAction = { type: 'fold', playerId: currentPlayer.id };\n        this.processAction(foldAction);\n        if (this.botActionCallback) {\n          this.botActionCallback(foldAction);\n        }\n      } finally {\n        // Reset flag after action is processed\n        this.botActionPending = false;\n      }\n    }, thinkingTime);\n  }\n\n  /**\n   * Get current player info\n   */\n  public getCurrentPlayer(): Player | null {\n    if (this.gameState.currentPlayerIndex < 0 || this.gameState.currentPlayerIndex >= this.gameState.players.length) {\n      return null;\n    }\n    return this.gameState.players[this.gameState.currentPlayerIndex];\n  }\n\n  /**\n   * Check if game needs bot action\n   */\n  public needsBotAction(): boolean {\n    return this.gameState.isStarted && this.gameState.phase !== 'ended' && this.gameState.phase !== 'showdown' && this.isCurrentPlayerBot();\n  }\n\n  public nextRound(): GameState {\n    // Reset game state for new round\n    this.gameState.communityCards = [];\n    this.gameState.pot = 0;\n    this.gameState.currentBet = 0;\n    this.gameState.round++;\n    this.gameState.phase = 'preflop';\n    this.gameState.winners = undefined;\n    \n    // Clear previous ironic events\n    this.gameState.lastIronicEvent = undefined;\n    this.gameState.activeSpecialEffects = [];\n    this.gameState.rouletteResult = undefined;\n\n    // Reset players\n    this.gameState.players.forEach(player => {\n      player.cards = [];\n      player.currentBet = 0;\n      player.totalBet = 0;\n      player.isFolded = false;\n      player.isAllIn = false;\n      player.isActive = player.chips > 0; // Only active if they have chips\n      player.lastAction = undefined;\n    });\n\n    // Remove players with no chips\n    this.gameState.players = this.gameState.players.filter(p => p.chips > 0);\n\n    if (this.gameState.players.length < this.gameState.minPlayers) {\n      this.gameState.phase = 'ended';\n      return this.gameState;\n    }\n\n    // Move dealer button AFTER filtering players\n    this.gameState.dealerIndex = (this.gameState.dealerIndex + 1) % this.gameState.players.length;\n    this.gameState.smallBlindIndex = (this.gameState.dealerIndex + 1) % this.gameState.players.length;\n    this.gameState.bigBlindIndex = (this.gameState.dealerIndex + 2) % this.gameState.players.length;\n\n    this.initializeDeck();\n    this.postBlinds();\n    this.dealHoleCards();\n    this.gameState.currentPlayerIndex = this.getNextActivePlayerIndex(this.gameState.bigBlindIndex);\n\n    // 🎰 BOJEK POKER IRONIC EVENTS! 🎲\n    this.triggerIronicEvents();\n    \n    // Trigger bot action if new current player is a bot and no bot action is pending\n    if (this.needsBotAction() && !this.botActionPending) {\n      setTimeout(() => this.processBotAction(), 1000);\n    }\n\n    return this.gameState;\n  }\n\n  /**\n   * 🎰 Trigger Bojek Poker's Ironic Events! 🎲\n   */\n  private triggerIronicEvents(): void {\n    // Skip events if not enough players or game just started\n    if (this.gameState.players.length < 2 || this.gameState.round === 1) {\n      return;\n    }\n\n    console.log('[BOJEK POKER] Checking for ironic events...');\n    \n    // 35% chance of triggering any event\n    if (!IronicEventEngine.shouldTriggerEvent()) {\n      console.log('[BOJEK POKER] No ironic event this round');\n      return;\n    }\n\n    // Spin the Bojek Roulette! 🎲\n    const rouletteNumber = IronicEventEngine.spinRoulette();\n    this.gameState.rouletteResult = rouletteNumber;\n    console.log(`[BOJEK POKER] Roulette spun: ${rouletteNumber}!`);\n\n    // Get event based on roulette or random\n    let selectedEvent = IronicEventEngine.getRouletteBasedEvent(rouletteNumber);\n    if (!selectedEvent) {\n      selectedEvent = IronicEventEngine.getRandomEvent();\n    }\n\n    console.log(`[BOJEK POKER] Executing ironic event: ${selectedEvent.name}`);\n    \n    // Execute the ironic event!\n    const result = IronicEventEngine.executeEvent(selectedEvent, this.gameState);\n    \n    if (result.success) {\n      // Store event notification for the frontend\n      this.gameState.lastIronicEvent = {\n        id: selectedEvent.id,\n        name: selectedEvent.name,\n        nameDE: selectedEvent.nameDE,\n        description: result.message,\n        descriptionDE: result.messageDE,\n        timestamp: Date.now(),\n        affectedPlayers: result.affectedPlayers,\n        specialEffect: result.specialEffect\n      };\n\n      // Store active special effects\n      if (result.specialEffect) {\n        this.gameState.activeSpecialEffects = [result.specialEffect];\n      }\n\n      console.log(`[BOJEK POKER] Event executed successfully: ${result.message}`);\n\n      // Notify via callback if set (for socket updates)\n      if (this.eventCallback) {\n        this.eventCallback({\n          type: 'ironic_event',\n          event: this.gameState.lastIronicEvent,\n          rouletteNumber,\n          gameState: this.gameState\n        });\n      }\n    } else {\n      console.log(`[BOJEK POKER] Event failed to execute: ${result.message}`);\n    }\n  }\n\n  /**\n   * Set callback for ironic events\n   */\n  public setEventCallback(callback: (event: any) => void): void {\n    this.eventCallback = callback;\n  }\n\n  /**\n   * Check if \"Reverse World\" effect is active\n   */\n  public isReverseWorldActive(): boolean {\n    return this.gameState.activeSpecialEffects?.includes('reverse_world') || false;\n  }\n\n  /**\n   * Modified hand evaluation for special effects\n   */\n  public evaluateHandWithEffects(cards: Card[]): HandRanking {\n    const normalHand = HandEvaluator.evaluateHand(cards);\n    \n    // Reverse World: Invert the hand ranking\n    if (this.isReverseWorldActive()) {\n      return {\n        ...normalHand,\n        rank: 11 - normalHand.rank, // Invert: Royal Flush (10) becomes High Card (1), etc.\n        name: `Reverse ${normalHand.name}`\n      };\n    }\n    \n    return normalHand;\n  }\n}\n","size_bytes":18316},"server/poker/gameStatsTracker.ts":{"content":"import { storage } from '../storage';\nimport { GameState, Player, Card } from '@shared/types';\n\nexport class GameStatsTracker {\n  private gameStartTime: Date | null = null;\n  private currentGameId: number | null = null;\n  private handNumber = 0;\n  private playerActions: Map<string, any[]> = new Map();\n\n  async startGame(gameState: GameState, roomName: string): Promise<void> {\n    this.gameStartTime = new Date();\n    this.handNumber = 0;\n    this.playerActions.clear();\n\n    try {\n      // Create game history record\n      const gameHistory = await storage.createGameHistory({\n        roomId: gameState.id,\n        roomName,\n        playerIds: gameState.players.map(p => p.id),\n        playerNames: gameState.players.map(p => p.name),\n        winnerId: null,\n        winnerName: null,\n        pot: gameState.pot.toString(),\n        blinds: gameState.blinds,\n        duration: null,\n        rounds: gameState.round,\n        endedAt: null,\n      });\n\n      this.currentGameId = gameHistory.id;\n    } catch (error) {\n      console.error('Error starting game stats tracking:', error);\n    }\n  }\n\n  async recordPlayerAction(playerId: string, action: any): Promise<void> {\n    if (!this.playerActions.has(playerId)) {\n      this.playerActions.set(playerId, []);\n    }\n    \n    const actions = this.playerActions.get(playerId)!;\n    actions.push({\n      ...action,\n      timestamp: new Date(),\n      handNumber: this.handNumber,\n    });\n  }\n\n  async recordHand(gameState: GameState, winners: any[]): Promise<void> {\n    if (!this.currentGameId) return;\n\n    this.handNumber++;\n\n    try {\n      // Record hand history for each player\n      for (const player of gameState.players) {\n        const isWinner = winners.some(w => w.playerId === player.id);\n        const winAmount = winners.find(w => w.playerId === player.id)?.amount || 0;\n        const playerActions = this.playerActions.get(player.id) || [];\n\n        // Only record hand history if we have a valid user ID\n        if (player.userId) {\n          await storage.createHandHistory({\n            gameId: this.currentGameId,\n            handNumber: this.handNumber,\n            playerId: player.userId,\n            playerName: player.name,\n            holeCards: player.cards,\n            communityCards: gameState.communityCards,\n            finalHand: isWinner ? winners.find(w => w.playerId === player.id)?.hand : null,\n            actions: playerActions.filter(a => a.handNumber === this.handNumber),\n            finalBet: player.totalBet.toString(),\n            winAmount: winAmount.toString(),\n            isWinner,\n            isFolded: player.isFolded,\n          });\n        } else {\n          console.warn(`Player ${player.name} (${player.id}) has no userId - skipping hand history`);\n        }\n\n        // Update player statistics\n        if (player.userId) {\n          const currentUser = await storage.getUser(player.userId);\n          if (currentUser) {\n            await storage.updateUserStats(player.userId, {\n              handsPlayed: currentUser.handsPlayed + 1,\n              handsWon: currentUser.handsWon + (isWinner ? 1 : 0),\n              totalWinnings: (parseFloat(currentUser.totalWinnings) + (isWinner ? winAmount : 0)).toString(),\n              totalLosses: (parseFloat(currentUser.totalLosses) + (isWinner ? 0 : player.totalBet)).toString(),\n            });\n          }\n        }\n      }\n\n      // Clear actions for this hand\n      this.playerActions.clear();\n    } catch (error) {\n      console.error('Error recording hand history:', error);\n    }\n  }\n\n  async endGame(gameState: GameState, winners: any[]): Promise<void> {\n    if (!this.currentGameId || !this.gameStartTime) return;\n\n    try {\n      const endTime = new Date();\n      const duration = Math.floor((endTime.getTime() - this.gameStartTime.getTime()) / 1000);\n      \n      const mainWinner = winners[0];\n      \n      await storage.updateGameHistory(this.currentGameId, {\n        winnerId: mainWinner ? \n          gameState.players.find(p => p.id === mainWinner.playerId)?.userId || null : null,\n        winnerName: mainWinner?.playerId ? \n          gameState.players.find(p => p.id === mainWinner.playerId)?.name : null,\n        pot: gameState.pot.toString(),\n        duration,\n        rounds: gameState.round,\n        endedAt: endTime,\n      });\n\n      // Update game statistics for all players\n      for (const player of gameState.players) {\n        if (player.userId) {\n          const currentUser = await storage.getUser(player.userId);\n          if (currentUser) {\n            const isGameWinner = winners.some(w => w.playerId === player.id);\n            await storage.updateUserStats(player.userId, {\n              gamesPlayed: currentUser.gamesPlayed + 1,\n              gamesWon: currentUser.gamesWon + (isGameWinner ? 1 : 0),\n            });\n          }\n        } else {\n          console.warn(`Player ${player.name} (${player.id}) has no userId - skipping game stats update`);\n        }\n      }\n\n      // Log winnings for tracking (no real money involved)\n      for (const winner of winners) {\n        const winnerPlayer = gameState.players.find(p => p.id === winner.playerId);\n        if (winnerPlayer?.userId) {\n          try {\n            // Create transaction record for tracking only\n            await storage.createTransaction({\n              userId: winnerPlayer.userId,\n              type: 'win',\n              amount: winner.amount.toString(),\n              description: `Won $${winner.amount} in poker game`,\n              stripeTransactionId: null,\n              status: 'completed',\n            });\n\n            console.log(`Player ${winnerPlayer.name} (ID: ${winnerPlayer.userId}) won $${winner.amount} (tracking only)`);\n          } catch (error) {\n            console.error(`Error logging winnings for player ${winnerPlayer.name}:`, error);\n          }\n        } else {\n          console.warn(`Winner player ${winner.playerId} has no userId - skipping tracking`);\n        }\n      }\n\n      // Reset tracking\n      this.currentGameId = null;\n      this.gameStartTime = null;\n      this.handNumber = 0;\n      this.playerActions.clear();\n    } catch (error) {\n      console.error('Error ending game stats tracking:', error);\n    }\n  }\n\n  getCurrentGameId(): number | null {\n    return this.currentGameId;\n  }\n\n  getCurrentHandNumber(): number {\n    return this.handNumber;\n  }\n}","size_bytes":6345},"server/poker/handEvaluator.ts":{"content":"import { Card, HandRanking } from '@shared/types';\n\nexport class HandEvaluator {\n  private static readonly HAND_RANKINGS = {\n    HIGH_CARD: 1,\n    PAIR: 2,\n    TWO_PAIR: 3,\n    THREE_OF_A_KIND: 4,\n    STRAIGHT: 5,\n    FLUSH: 6,\n    FULL_HOUSE: 7,\n    FOUR_OF_A_KIND: 8,\n    STRAIGHT_FLUSH: 9,\n    ROYAL_FLUSH: 10\n  };\n\n  private static getCardValue(rank: string): number {\n    const values: { [key: string]: number } = {\n      'A': 14, 'K': 13, 'Q': 12, 'J': 11, '10': 10,\n      '9': 9, '8': 8, '7': 7, '6': 6, '5': 5, '4': 4, '3': 3, '2': 2\n    };\n    return values[rank];\n  }\n\n  private static isAceLowStraight(values: number[]): boolean {\n    const sortedValues = [...values].sort((a, b) => a - b);\n    return JSON.stringify(sortedValues) === JSON.stringify([2, 3, 4, 5, 14]);\n  }\n\n  public static evaluateHand(cards: Card[]): HandRanking {\n    if (cards.length !== 7) {\n      throw new Error('Hand evaluation requires exactly 7 cards');\n    }\n\n    // Get all possible 5-card combinations\n    const combinations = this.getCombinations(cards, 5);\n    let bestHand: HandRanking = {\n      rank: 0,\n      name: '',\n      cards: [],\n      tiebreakers: []\n    };\n\n    for (const combo of combinations) {\n      const handRank = this.evaluateFiveCards(combo);\n      if (handRank.rank > bestHand.rank || \n          (handRank.rank === bestHand.rank && this.compareTiebreakers(handRank.tiebreakers, bestHand.tiebreakers) > 0)) {\n        bestHand = handRank;\n      }\n    }\n\n    return bestHand;\n  }\n\n  private static evaluateFiveCards(cards: Card[]): HandRanking {\n    const values = cards.map(card => this.getCardValue(card.rank)).sort((a, b) => b - a);\n    const suits = cards.map(card => card.suit);\n    \n    const isFlush = suits.every(suit => suit === suits[0]);\n    const isStraight = this.isStraight(values);\n    const isRoyalFlush = isFlush && isStraight && values[0] === 14 && values[4] === 10;\n    const isStraightFlush = isFlush && isStraight;\n\n    // Count occurrences of each value\n    const valueCounts: { [key: number]: number } = {};\n    values.forEach(value => {\n      valueCounts[value] = (valueCounts[value] || 0) + 1;\n    });\n\n    const counts = Object.values(valueCounts).sort((a, b) => b - a);\n    const countValues = Object.keys(valueCounts)\n      .map(k => parseInt(k))\n      .sort((a, b) => (valueCounts[b] - valueCounts[a]) || (b - a));\n\n    if (isRoyalFlush) {\n      return {\n        rank: this.HAND_RANKINGS.ROYAL_FLUSH,\n        name: 'Royal Flush',\n        cards,\n        tiebreakers: []\n      };\n    }\n\n    if (isStraightFlush) {\n      const highCard = this.isAceLowStraight(values) ? 5 : values[0];\n      return {\n        rank: this.HAND_RANKINGS.STRAIGHT_FLUSH,\n        name: 'Straight Flush',\n        cards,\n        tiebreakers: [highCard]\n      };\n    }\n\n    if (counts[0] === 4) {\n      return {\n        rank: this.HAND_RANKINGS.FOUR_OF_A_KIND,\n        name: 'Four of a Kind',\n        cards,\n        tiebreakers: [countValues[0], countValues[1]]\n      };\n    }\n\n    if (counts[0] === 3 && counts[1] === 2) {\n      return {\n        rank: this.HAND_RANKINGS.FULL_HOUSE,\n        name: 'Full House',\n        cards,\n        tiebreakers: [countValues[0], countValues[1]]\n      };\n    }\n\n    if (isFlush) {\n      return {\n        rank: this.HAND_RANKINGS.FLUSH,\n        name: 'Flush',\n        cards,\n        tiebreakers: values\n      };\n    }\n\n    if (isStraight) {\n      const highCard = this.isAceLowStraight(values) ? 5 : values[0];\n      return {\n        rank: this.HAND_RANKINGS.STRAIGHT,\n        name: 'Straight',\n        cards,\n        tiebreakers: [highCard]\n      };\n    }\n\n    if (counts[0] === 3) {\n      return {\n        rank: this.HAND_RANKINGS.THREE_OF_A_KIND,\n        name: 'Three of a Kind',\n        cards,\n        tiebreakers: [countValues[0], ...countValues.slice(1)]\n      };\n    }\n\n    if (counts[0] === 2 && counts[1] === 2) {\n      return {\n        rank: this.HAND_RANKINGS.TWO_PAIR,\n        name: 'Two Pair',\n        cards,\n        tiebreakers: [countValues[0], countValues[1], countValues[2]]\n      };\n    }\n\n    if (counts[0] === 2) {\n      return {\n        rank: this.HAND_RANKINGS.PAIR,\n        name: 'Pair',\n        cards,\n        tiebreakers: [countValues[0], ...countValues.slice(1)]\n      };\n    }\n\n    return {\n      rank: this.HAND_RANKINGS.HIGH_CARD,\n      name: 'High Card',\n      cards,\n      tiebreakers: values\n    };\n  }\n\n  private static isStraight(values: number[]): boolean {\n    const uniqueValues = Array.from(new Set(values)).sort((a, b) => b - a);\n    \n    if (uniqueValues.length !== 5) return false;\n\n    // Check for ace-low straight (A, 5, 4, 3, 2)\n    if (this.isAceLowStraight(uniqueValues)) return true;\n\n    // Check for regular straight\n    for (let i = 0; i < 4; i++) {\n      if (uniqueValues[i] - uniqueValues[i + 1] !== 1) return false;\n    }\n    \n    return true;\n  }\n\n  private static compareTiebreakers(a: number[], b: number[]): number {\n    for (let i = 0; i < Math.max(a.length, b.length); i++) {\n      const valA = a[i] || 0;\n      const valB = b[i] || 0;\n      if (valA !== valB) return valA - valB;\n    }\n    return 0;\n  }\n\n  private static getCombinations<T>(arr: T[], k: number): T[][] {\n    if (k === 1) return arr.map(x => [x]);\n    if (k === arr.length) return [arr];\n    \n    const result: T[][] = [];\n    for (let i = 0; i <= arr.length - k; i++) {\n      const first = arr[i];\n      const rest = arr.slice(i + 1);\n      const combos = this.getCombinations(rest, k - 1);\n      combos.forEach(combo => result.push([first, ...combo]));\n    }\n    return result;\n  }\n\n  public static compareHands(hand1: HandRanking, hand2: HandRanking): number {\n    if (hand1.rank !== hand2.rank) {\n      return hand1.rank - hand2.rank;\n    }\n    return this.compareTiebreakers(hand1.tiebreakers, hand2.tiebreakers);\n  }\n}\n","size_bytes":5796},"server/poker/socketHandlers.ts":{"content":"import { Server, Socket } from 'socket.io';\nimport { PokerGame } from './gameLogic';\nimport { BotPlayer } from './botPlayer';\nimport { GameStatsTracker } from './gameStatsTracker';\nimport { TournamentEngine } from './tournamentEngine';\nimport { storage } from '../storage';\nimport { verifyToken } from '../auth';\nimport { Room, Player, PokerAction, TournamentBlindLevel } from '@shared/types';\n\ninterface GameRoom {\n  room: Room;\n  game?: PokerGame;\n  statsTracker?: GameStatsTracker;\n  players: Map<string, Player>;\n}\n\nexport class PokerSocketHandler {\n  private io: Server;\n  private rooms: Map<string, GameRoom> = new Map();\n  private playerToRoom: Map<string, string> = new Map();\n  private socketToUserId: Map<string, string> = new Map();\n  private socketToUsername: Map<string, string> = new Map();\n  private tournamentEngine: TournamentEngine;\n\n  constructor(io: Server) {\n    this.io = io;\n    this.tournamentEngine = new TournamentEngine();\n    this.setupSocketHandlers();\n  }\n\n  private setupSocketHandlers(): void {\n    this.io.on('connection', (socket: Socket) => {\n      console.log(`Player connected: ${socket.id}`);\n\n      // Handle user authentication\n      socket.on('authenticate', async (data: { token?: string; userId?: number; username?: string }) => {\n        try {\n          if (data.token) {\n            // Verify JWT token\n            const decoded = verifyToken(data.token);\n            if (!decoded) {\n              socket.emit('authenticated', { success: false, message: 'Invalid token' });\n              return;\n            }\n\n            // Get user from database to verify they exist and get current info\n            const user = await storage.getUser(parseInt(decoded.userId));\n            if (!user) {\n              socket.emit('authenticated', { success: false, message: 'User not found' });\n              return;\n            }\n\n            // Store authenticated user mapping  \n            this.socketToUserId.set(socket.id, user.id.toString());\n            this.socketToUsername.set(socket.id, user.username);\n            \n            socket.emit('authenticated', { \n              success: true, \n              user: { \n                id: user.id, \n                username: user.username, \n                balance: user.balance \n              } \n            });\n            console.log(`Socket ${socket.id} authenticated as user ${user.id} (${user.username})`);\n          } else {\n            // Reject all non-token authentication for security\n            socket.emit('authenticated', { success: false, message: 'Authentication token required for real money games' });\n            console.log(`Authentication rejected for socket ${socket.id} - no valid token provided`);\n          }\n        } catch (error) {\n          console.error('Authentication error:', error);\n          socket.emit('authenticated', { success: false, message: 'Authentication failed' });\n        }\n      });\n\n      socket.on('get-rooms', () => {\n        this.handleGetRooms(socket);\n      });\n\n      socket.on('create-room', (data) => {\n        this.handleCreateRoom(socket, data);\n      });\n      \n      socket.on('create-singleplayer-room', (data) => {\n        this.handleCreateSinglePlayerRoom(socket, data);\n      });\n\n      socket.on('join-room', (data) => {\n        this.handleJoinRoom(socket, data);\n      });\n\n      socket.on('leave-room', () => {\n        this.handleLeaveRoom(socket);\n      });\n\n      socket.on('start-game', () => {\n        this.handleStartGame(socket);\n      });\n\n      socket.on('player-action', (action: PokerAction) => {\n        this.handlePlayerAction(socket, action);\n      });\n\n      // Tournament handlers\n      socket.on('get-tournaments', () => {\n        this.handleGetTournaments(socket);\n      });\n\n      socket.on('create-tournament', (data) => {\n        this.handleCreateTournament(socket, data);\n      });\n\n      socket.on('join-tournament', (data) => {\n        this.handleJoinTournament(socket, data);\n      });\n\n      socket.on('start-tournament', (data) => {\n        this.handleStartTournament(socket, data);\n      });\n\n      socket.on('disconnect', () => {\n        this.handleDisconnect(socket);\n      });\n    });\n  }\n\n  private handleGetRooms(socket: Socket): void {\n    const publicRooms = Array.from(this.rooms.values())\n      .filter(gameRoom => !gameRoom.room.isPrivate)\n      .map(gameRoom => ({\n        ...gameRoom.room,\n        currentPlayers: gameRoom.players.size\n      }));\n\n    socket.emit('rooms-list', publicRooms);\n  }\n\n  private async handleCreateRoom(socket: Socket, data: {\n    name: string;\n    maxPlayers: number;\n    blinds: { small: number; big: number };\n    buyIn: number;\n    isPrivate: boolean;\n    password?: string;\n    playerName: string;\n  }): Promise<void> {\n    // Require authentication for real money games\n    const userId = this.socketToUserId.get(socket.id);\n    if (!userId) {\n      socket.emit('error', { message: 'Authentication required to create real money games' });\n      return;\n    }\n    const roomId = this.generateRoomId();\n    const room: Room = {\n      id: roomId,\n      name: data.name,\n      maxPlayers: Math.min(Math.max(data.maxPlayers, 3), 6),\n      currentPlayers: 0,\n      blinds: data.blinds,\n      buyIn: data.buyIn,\n      isPrivate: data.isPrivate,\n      password: data.password\n    };\n\n    const gameRoom: GameRoom = {\n      room,\n      players: new Map()\n    };\n\n    this.rooms.set(roomId, gameRoom);\n    \n    // Add creator to room\n    await this.joinPlayerToRoom(socket, roomId, data.playerName, data.buyIn);\n    \n    console.log(`[DEBUG] Emitting room-created event for room ${roomId} to socket ${socket.id}`);\n    socket.emit('room-created', { roomId, room: this.getRoomData(gameRoom) });\n    console.log(`[DEBUG] room-created event emitted for room ${roomId}`);\n  }\n\n  private async handleCreateSinglePlayerRoom(socket: Socket, data: {\n    name: string;\n    blinds: { small: number; big: number };\n    buyIn: number;\n    playerName: string;\n    botCount?: number;\n  }): Promise<void> {\n    // Require authentication for single player games too\n    const userId = this.socketToUserId.get(socket.id);\n    if (!userId) {\n      socket.emit('error', { message: 'Authentication required to create games' });\n      return;\n    }\n\n    // Look for existing single player room\n    const existingSinglePlayerRoom = this.findAvailableSinglePlayerRoom();\n    \n    if (existingSinglePlayerRoom) {\n      console.log(`[DEBUG] Reusing existing single player room ${existingSinglePlayerRoom.room.id}`);\n      \n      // Reset the room completely for reuse\n      await this.resetSinglePlayerRoom(existingSinglePlayerRoom, data, socket);\n      \n      socket.emit('room-created', { roomId: existingSinglePlayerRoom.room.id, room: this.getRoomData(existingSinglePlayerRoom) });\n      return;\n    }\n\n    // Create new single player room\n    const roomId = this.generateRoomId();\n    const botCount = data.botCount || 3; // Default to 3 bots (4 total players)\n    const maxPlayers = botCount + 1; // Human player + bots\n\n    const room: Room = {\n      id: roomId,\n      name: \"Single Player vs Computer\",\n      maxPlayers,\n      currentPlayers: 0,\n      blinds: data.blinds,\n      buyIn: data.buyIn,\n      isPrivate: false,\n      isSinglePlayer: true\n    };\n\n    // Create bots for the game\n    const bots = BotPlayer.createBots(botCount, data.buyIn);\n    const botPlayers = bots.map((bot, index) => bot.createPlayerObject(data.buyIn, index + 1));\n\n    const gameRoom: GameRoom = {\n      room,\n      players: new Map()\n    };\n\n    this.rooms.set(roomId, gameRoom);\n    \n    // Add bot players to the room FIRST\n    botPlayers.forEach(botPlayer => {\n      gameRoom.players.set(botPlayer.id, botPlayer);\n    });\n    \n    // Add human player to room (this will include bots in the joined-room payload)\n    await this.joinPlayerToRoom(socket, roomId, data.playerName, data.buyIn);\n    \n    // Update room player count\n    gameRoom.room.currentPlayers = gameRoom.players.size;\n    \n    // Create the poker game with bots\n    const allPlayers = Array.from(gameRoom.players.values());\n    gameRoom.game = new PokerGame(roomId, allPlayers, room.blinds, bots);\n    \n    // Set up bot action callback\n    gameRoom.game.setBotActionCallback((action: PokerAction) => {\n      console.log(`[BOT ACTION] ${action.playerId}: ${action.type}${action.amount ? ` $${action.amount}` : ''}`);\n      \n      // Safety check - ensure game still exists\n      if (!gameRoom.game) {\n        console.log(`[DEBUG] Bot action callback fired but game is undefined, ignoring`);\n        return;\n      }\n      \n      // Broadcast bot action to the room\n      this.io.to(roomId).emit('player-action', {\n        action,\n        gameState: gameRoom.game.getGameState()\n      });\n      \n      // Check if game needs another bot action  \n      if (gameRoom.game.needsBotAction()) {\n        setTimeout(() => {\n          // Double-check game still exists before processing\n          if (gameRoom.game) {\n            gameRoom.game.processBotAction();\n          }\n        }, 1000);\n      }\n    });\n\n    // 🎰 Set up Bojek Poker Ironic Event Callback! 🎲\n    gameRoom.game.setEventCallback((eventData: any) => {\n      console.log(`[BOJEK POKER EVENT] ${eventData.event?.name}: ${eventData.event?.description}`);\n      \n      // Safety check - ensure game still exists\n      if (!gameRoom.game) {\n        console.log(`[DEBUG] Ironic event callback fired but game is undefined, ignoring`);\n        return;\n      }\n      \n      // Broadcast the amazing ironic event to all players! 🎰\n      this.io.to(roomId).emit('ironic-event', eventData);\n      \n      // Also broadcast updated game state with the new event data\n      this.io.to(roomId).emit('game-updated', gameRoom.game.getGameState());\n    });\n    \n    // Auto-start the single player game immediately\n    console.log(`[DEBUG] Auto-starting single player game in room ${roomId}`);\n    try {\n      const gameState = gameRoom.game.startGame();\n      gameRoom.statsTracker = new GameStatsTracker();\n      await gameRoom.statsTracker.startGame(gameState, gameRoom.room.name);\n      \n      this.io.to(roomId).emit('game-started', gameState);\n      this.sendPrivateGameData(roomId);\n      console.log(`[DEBUG] Single player game started automatically in room ${roomId}`);\n    } catch (error) {\n      console.error('Error auto-starting single player game:', error);\n      socket.emit('error', { message: 'Failed to start game automatically' });\n    }\n    \n    console.log(`Created single player room ${roomId} with ${botCount} bots`);\n    socket.emit('room-created', { roomId, room: this.getRoomData(gameRoom) });\n  }\n\n  /**\n   * Find an available single player room (not started or ended)\n   */\n  private findAvailableSinglePlayerRoom(): GameRoom | null {\n    const roomArray = Array.from(this.rooms.values());\n    for (const gameRoom of roomArray) {\n      if (gameRoom.room.isSinglePlayer) {\n        // Check if room has space for human players (excluding bots)\n        const humanPlayers = Array.from(gameRoom.players.values()).filter((p: Player) => !p.id.startsWith('bot_'));\n        const gameState = gameRoom.game?.getGameState();\n        \n        // Room is available if:\n        // 1. Has space for another human player\n        // 2. Game hasn't started yet OR has ended (for reset)\n        if (humanPlayers.length < 1 && (!gameState || !gameState.isStarted || gameState.phase === 'ended')) {\n          return gameRoom;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Reset and reinitialize a single player room for reuse\n   */\n  private async resetSinglePlayerRoom(gameRoom: GameRoom, data: {\n    name: string;\n    blinds: { small: number; big: number };\n    buyIn: number;\n    playerName: string;\n    botCount?: number;\n  }, socket: Socket): Promise<void> {\n    const roomId = gameRoom.room.id;\n    const botCount = data.botCount || 3;\n    \n    // Clear existing players and game state\n    gameRoom.players.clear();\n    gameRoom.game = undefined;\n    gameRoom.statsTracker = undefined;\n    \n    // Update room settings\n    gameRoom.room.blinds = data.blinds;\n    gameRoom.room.buyIn = data.buyIn;\n    gameRoom.room.maxPlayers = botCount + 1;\n    \n    // Create fresh bots FIRST\n    const bots = BotPlayer.createBots(botCount, data.buyIn);\n    const botPlayers = bots.map((bot, index) => bot.createPlayerObject(data.buyIn, index + 1));\n    \n    // Add bot players to the room first\n    botPlayers.forEach(botPlayer => {\n      gameRoom.players.set(botPlayer.id, botPlayer);\n    });\n    \n    // Add human player (this will include bots in the joined-room payload)\n    await this.joinPlayerToRoom(socket, roomId, data.playerName, data.buyIn);\n    \n    // Update room player count\n    gameRoom.room.currentPlayers = gameRoom.players.size;\n    \n    // Create fresh poker game with bots\n    const allPlayers = Array.from(gameRoom.players.values());\n    gameRoom.game = new PokerGame(roomId, allPlayers, gameRoom.room.blinds, bots);\n    \n    // Set up bot action callback\n    gameRoom.game.setBotActionCallback((action: PokerAction) => {\n      console.log(`[BOT ACTION] ${action.playerId}: ${action.type}${action.amount ? ` $${action.amount}` : ''}`);\n      \n      // Safety check - ensure game still exists\n      if (!gameRoom.game) {\n        console.log(`[DEBUG] Bot action callback fired but game is undefined, ignoring`);\n        return;\n      }\n      \n      // Broadcast bot action to the room\n      this.io.to(roomId).emit('player-action', {\n        action,\n        gameState: gameRoom.game.getGameState()\n      });\n      \n      // Check if game needs another bot action  \n      if (gameRoom.game.needsBotAction()) {\n        setTimeout(() => {\n          // Double-check game still exists before processing\n          if (gameRoom.game) {\n            gameRoom.game.processBotAction();\n          }\n        }, 1000);\n      }\n    });\n\n    // 🎰 Set up Bojek Poker Ironic Event Callback! 🎲\n    gameRoom.game.setEventCallback((eventData: any) => {\n      console.log(`[BOJEK POKER EVENT] ${eventData.event?.name}: ${eventData.event?.description}`);\n      \n      // Safety check - ensure game still exists\n      if (!gameRoom.game) {\n        console.log(`[DEBUG] Ironic event callback fired but game is undefined, ignoring`);\n        return;\n      }\n      \n      // Broadcast the amazing ironic event to all players! 🎰\n      this.io.to(roomId).emit('ironic-event', eventData);\n      \n      // Also broadcast updated game state with the new event data\n      this.io.to(roomId).emit('game-updated', gameRoom.game.getGameState());\n    });\n    \n    // Auto-start the game\n    console.log(`[DEBUG] Auto-starting reused single player game in room ${roomId}`);\n    try {\n      const gameState = gameRoom.game.startGame();\n      gameRoom.statsTracker = new GameStatsTracker();\n      await gameRoom.statsTracker.startGame(gameState, gameRoom.room.name);\n      \n      this.io.to(roomId).emit('game-started', gameState);\n      this.sendPrivateGameData(roomId);\n      console.log(`[DEBUG] Reused single player game started automatically in room ${roomId}`);\n    } catch (error) {\n      console.error('Error auto-starting reused single player game:', error);\n      socket.emit('error', { message: 'Failed to start game automatically' });\n    }\n  }\n\n  private async handleJoinRoom(socket: Socket, data: {\n    roomId: string;\n    playerName: string;\n    buyIn: number;\n    password?: string;\n  }): Promise<void> {\n    console.log(`[DEBUG] handleJoinRoom called for socket ${socket.id} with data:`, JSON.stringify(data));\n    \n    // Require authentication for real money games\n    const userId = this.socketToUserId.get(socket.id);\n    console.log(`[DEBUG] userId for join: ${userId}`);\n    \n    if (!userId) {\n      console.log(`[DEBUG] No userId for join, emitting error`);\n      socket.emit('error', { message: 'Authentication required to join real money games' });\n      return;\n    }\n    const gameRoom = this.rooms.get(data.roomId);\n    \n    if (!gameRoom) {\n      socket.emit('error', { message: 'Room not found' });\n      return;\n    }\n\n    if (gameRoom.room.isPrivate && gameRoom.room.password !== data.password) {\n      socket.emit('error', { message: 'Invalid password' });\n      return;\n    }\n\n    if (gameRoom.players.size >= gameRoom.room.maxPlayers) {\n      socket.emit('error', { message: 'Room is full' });\n      return;\n    }\n\n    if (data.buyIn < gameRoom.room.buyIn) {\n      socket.emit('error', { message: 'Insufficient buy-in amount' });\n      return;\n    }\n\n    await this.joinPlayerToRoom(socket, data.roomId, data.playerName, data.buyIn);\n  }\n\n  private async joinPlayerToRoom(socket: Socket, roomId: string, playerName: string, buyIn: number): Promise<void> {\n    const gameRoom = this.rooms.get(roomId)!;\n    \n    // Remove player from previous room if any\n    this.handleLeaveRoom(socket);\n\n    // Log buy-in for statistics (no real money involved)\n    const userId = this.socketToUserId.get(socket.id);\n    if (userId) {\n      try {\n        // Create buy-in transaction record for tracking only\n        await storage.createTransaction({\n          userId: parseInt(userId),\n          type: 'buyin',\n          amount: buyIn.toString(), // Positive for tracking\n          description: `Buy-in for poker room: ${gameRoom.room.name}`,\n          stripeTransactionId: null,\n          status: 'completed',\n        });\n\n        console.log(`Player ${playerName} (ID: ${userId}) bought in for $${buyIn} (tracking only)`);\n      } catch (error) {\n        console.error('Error logging buy-in:', error);\n      }\n    }\n\n    // For single player rooms, human gets position 0, bots get 1,2,3\n    const position = gameRoom.room.isSinglePlayer ? 0 : gameRoom.players.size;\n    \n    const player: Player = {\n      id: socket.id,\n      userId: parseInt(this.socketToUserId.get(socket.id) || '0'),\n      name: playerName,\n      chips: buyIn,\n      cards: [],\n      currentBet: 0,\n      totalBet: 0,\n      position: position,\n      isActive: true,\n      isFolded: false,\n      isAllIn: false\n    };\n\n    gameRoom.players.set(socket.id, player);\n    this.playerToRoom.set(socket.id, roomId);\n    \n    socket.join(roomId);\n    \n    // Notify all players in room\n    this.io.to(roomId).emit('player-joined', {\n      player: this.getPublicPlayerData(player),\n      room: this.getRoomData(gameRoom)\n    });\n\n    console.log(`[DEBUG] About to emit joined-room event for socket ${socket.id} to room ${roomId}`);\n    socket.emit('joined-room', {\n      roomId,\n      room: this.getRoomData(gameRoom),\n      players: Array.from(gameRoom.players.values()).map(p => this.getPublicPlayerData(p)),\n      gameState: gameRoom.game?.getGameState()\n    });\n    console.log(`[DEBUG] joined-room event emitted for socket ${socket.id}`);\n\n  }\n\n  private handleLeaveRoom(socket: Socket): void {\n    const roomId = this.playerToRoom.get(socket.id);\n    if (!roomId) return;\n\n    const gameRoom = this.rooms.get(roomId);\n    if (!gameRoom) return;\n\n    gameRoom.players.delete(socket.id);\n    this.playerToRoom.delete(socket.id);\n    socket.leave(roomId);\n\n    // If room is empty, delete it\n    if (gameRoom.players.size === 0) {\n      console.log(`[DEBUG] Deleting empty room ${roomId}`);\n      this.rooms.delete(roomId);\n      return;\n    }\n\n    // For single player rooms, if the human player leaves, reset the room\n    if (gameRoom.room.isSinglePlayer) {\n      const humanPlayers = Array.from(gameRoom.players.values()).filter((p: Player) => !p.id.startsWith('bot_'));\n      if (humanPlayers.length === 0) {\n        console.log(`[DEBUG] Resetting single player room ${roomId} - no human players left`);\n        // Reset the game state but keep the room for reuse\n        gameRoom.game = undefined;\n        gameRoom.statsTracker = undefined;\n        return;\n      }\n    }\n\n    // Notify remaining players\n    this.io.to(roomId).emit('player-left', {\n      playerId: socket.id,\n      room: this.getRoomData(gameRoom)\n    });\n\n    // If game was in progress and player was active, handle their absence\n    if (gameRoom.game) {\n      const gameState = gameRoom.game.getGameState();\n      const player = gameState.players.find(p => p.id === socket.id);\n      if (player && gameState.isStarted && !gameState.winners) {\n        // Auto-fold the disconnected player if it's their turn\n        if (gameState.currentPlayerIndex === player.position) {\n          try {\n            const updatedState = gameRoom.game.processAction({\n              type: 'fold',\n              playerId: socket.id\n            });\n            this.io.to(roomId).emit('game-updated', updatedState);\n          } catch (error) {\n            console.error('Error handling disconnected player action:', error);\n          }\n        }\n      }\n    }\n  }\n\n  private async handleStartGame(socket: Socket): Promise<void> {\n    const roomId = this.playerToRoom.get(socket.id);\n    if (!roomId) {\n      socket.emit('error', { message: 'Not in a room' });\n      return;\n    }\n\n    const gameRoom = this.rooms.get(roomId)!;\n    const players = Array.from(gameRoom.players.values());\n\n    if (players.length < 3) {\n      socket.emit('error', { message: 'Need at least 3 players to start' });\n      return;\n    }\n\n    if (gameRoom.game && gameRoom.game.getGameState().isStarted) {\n      socket.emit('error', { message: 'Game already started' });\n      return;\n    }\n\n    try {\n      gameRoom.game = new PokerGame(roomId, players, gameRoom.room.blinds);\n      gameRoom.statsTracker = new GameStatsTracker();\n      \n      const gameState = gameRoom.game.startGame();\n      \n      // Start stats tracking\n      await gameRoom.statsTracker.startGame(gameState, gameRoom.room.name);\n      \n      this.io.to(roomId).emit('game-started', gameState);\n      this.sendPrivateGameData(roomId);\n    } catch (error) {\n      socket.emit('error', { message: (error as Error).message });\n    }\n  }\n\n  private async handlePlayerAction(socket: Socket, action: PokerAction): Promise<void> {\n    const roomId = this.playerToRoom.get(socket.id);\n    if (!roomId) {\n      socket.emit('error', { message: 'Not in a room' });\n      return;\n    }\n\n    const gameRoom = this.rooms.get(roomId)!;\n    if (!gameRoom.game) {\n      socket.emit('error', { message: 'No active game' });\n      return;\n    }\n\n    try {\n      action.playerId = socket.id;\n      \n      // Record player action for stats\n      if (gameRoom.statsTracker) {\n        await gameRoom.statsTracker.recordPlayerAction(socket.id, action);\n      }\n      \n      const updatedState = gameRoom.game.processAction(action);\n      \n      // Record hand completion if game moved to showdown or ended\n      if (updatedState.phase === 'showdown' && gameRoom.statsTracker) {\n        await gameRoom.statsTracker.recordHand(updatedState, updatedState.winners || []);\n      }\n      \n      this.io.to(roomId).emit('game-updated', updatedState);\n      this.sendPrivateGameData(roomId);\n\n      // Check if a bot should act next\n      if (gameRoom.game.needsBotAction()) {\n        setTimeout(() => {\n          // Double-check game still exists before processing\n          if (gameRoom.game) {\n            gameRoom.game.processBotAction();\n          }\n        }, 500);\n      }\n\n      // Check if game ended\n      if (updatedState.phase === 'ended') {\n        if (gameRoom.statsTracker && updatedState.winners) {\n          await gameRoom.statsTracker.endGame(updatedState, updatedState.winners);\n        }\n        \n        // Start new round after delay if enough players\n        if (updatedState.players.filter(p => p.chips > 0).length > 1) {\n          setTimeout(() => {\n            if (gameRoom.game) {\n              const newRoundState = gameRoom.game.nextRound();\n              this.io.to(roomId).emit('game-updated', newRoundState);\n              this.sendPrivateGameData(roomId);\n            }\n          }, 5000); // 5 second delay before next round\n        }\n      }\n    } catch (error) {\n      socket.emit('error', { message: (error as Error).message });\n    }\n  }\n\n  private handleDisconnect(socket: Socket): void {\n    console.log(`Player disconnected: ${socket.id}`);\n    this.handleLeaveRoom(socket);\n    this.socketToUserId.delete(socket.id);\n  }\n\n  private sendPrivateGameData(roomId: string): void {\n    const gameRoom = this.rooms.get(roomId);\n    if (!gameRoom || !gameRoom.game) return;\n\n    const gameState = gameRoom.game.getGameState();\n    \n    // Send each player their private cards\n    gameState.players.forEach(player => {\n      this.io.to(player.id).emit('private-cards', player.cards);\n    });\n  }\n\n  private getRoomData(gameRoom: GameRoom): Room {\n    return {\n      ...gameRoom.room,\n      currentPlayers: gameRoom.players.size,\n      gameState: gameRoom.game?.getGameState()\n    };\n  }\n\n  private getPublicPlayerData(player: Player) {\n    return {\n      id: player.id,\n      name: player.name,\n      chips: player.chips,\n      position: player.position,\n      currentBet: player.currentBet,\n      totalBet: player.totalBet,\n      isActive: player.isActive,\n      isFolded: player.isFolded,\n      isAllIn: player.isAllIn,\n      lastAction: player.lastAction,\n      cardCount: player.cards.length // Don't send actual cards to other players\n    };\n  }\n\n  private generateRoomId(): string {\n    return Math.random().toString(36).substring(2, 8).toUpperCase();\n  }\n\n  // Tournament handlers\n  private handleGetTournaments(socket: Socket): void {\n    const tournaments = this.tournamentEngine.getActiveTournaments();\n    socket.emit('tournaments-list', tournaments);\n  }\n\n  private async handleCreateTournament(socket: Socket, data: {\n    name: string;\n    buyIn: number;\n    maxPlayers: number;\n    blindStructure?: TournamentBlindLevel[];\n    playerName: string;\n  }): Promise<void> {\n    // Require authentication for real money tournaments\n    const userId = this.socketToUserId.get(socket.id);\n    if (!userId) {\n      socket.emit('error', { message: 'Authentication required to create real money tournaments' });\n      return;\n    }\n\n    try {\n      // Log tournament buy-in for statistics (no real money involved)\n      try {\n        await storage.createTransaction({\n          userId: parseInt(userId),\n          type: 'buyin',\n          amount: data.buyIn.toString(), // Positive for tracking\n          description: `Tournament buy-in: ${data.name}`,\n          stripeTransactionId: null,\n          status: 'completed',\n        });\n\n        console.log(`Player ${data.playerName} (ID: ${userId}) tournament buy-in $${data.buyIn} (tracking only)`);\n      } catch (error) {\n        console.error('Error logging tournament buy-in:', error);\n      }\n\n      const tournament = this.tournamentEngine.createTournament(\n        data.name,\n        data.buyIn,\n        Math.min(Math.max(data.maxPlayers, 3), 20),\n        data.blindStructure\n      );\n\n      // Auto-join the creator\n      const joined = this.tournamentEngine.joinTournament(tournament.id, socket.id, data.playerName);\n      \n      if (joined) {\n        socket.emit('tournament-created', tournament);\n        socket.join(`tournament_${tournament.id}`);\n        this.io.emit('tournament-updated', tournament);\n      } else {\n        socket.emit('error', { message: 'Failed to join tournament' });\n      }\n    } catch (error) {\n      socket.emit('error', { message: (error as Error).message });\n    }\n  }\n\n  private async handleJoinTournament(socket: Socket, data: {\n    tournamentId: string;\n    playerName: string;\n  }): Promise<void> {\n    // Require authentication for real money tournaments\n    const userId = this.socketToUserId.get(socket.id);\n    if (!userId) {\n      socket.emit('error', { message: 'Authentication required to join real money tournaments' });\n      return;\n    }\n\n    try {\n      // Get tournament details \n      const tournament = this.tournamentEngine.getTournament(data.tournamentId);\n      if (!tournament) {\n        socket.emit('error', { message: 'Tournament not found' });\n        return;\n      }\n\n      // Log tournament join for statistics (no real money involved)\n      try {\n        await storage.createTransaction({\n          userId: parseInt(userId),\n          type: 'buyin',\n          amount: tournament.buyIn.toString(), // Positive for tracking\n          description: `Tournament buy-in: ${tournament.name}`,\n          stripeTransactionId: null,\n          status: 'completed',\n        });\n\n        console.log(`Player ${data.playerName} (ID: ${userId}) tournament buy-in $${tournament.buyIn} (tracking only)`);\n      } catch (error) {\n        console.error('Error logging tournament buy-in:', error);\n      }\n\n      const joined = this.tournamentEngine.joinTournament(data.tournamentId, socket.id, data.playerName);\n      \n      if (joined) {\n        socket.join(`tournament_${data.tournamentId}`);\n        const tournament = this.tournamentEngine.getTournament(data.tournamentId);\n        \n        if (tournament) {\n          socket.emit('tournament-joined', tournament);\n          this.io.to(`tournament_${data.tournamentId}`).emit('tournament-updated', tournament);\n        }\n      } else {\n        socket.emit('error', { message: 'Could not join tournament' });\n      }\n    } catch (error) {\n      socket.emit('error', { message: (error as Error).message });\n    }\n  }\n\n  private handleStartTournament(socket: Socket, data: { tournamentId: string }): void {\n    // Require authentication for tournament management\n    const userId = this.socketToUserId.get(socket.id);\n    if (!userId) {\n      socket.emit('error', { message: 'Authentication required to manage tournaments' });\n      return;\n    }\n\n    try {\n      const started = this.tournamentEngine.startTournament(data.tournamentId);\n      \n      if (started) {\n        const tournament = this.tournamentEngine.getTournament(data.tournamentId);\n        if (tournament) {\n          this.io.to(`tournament_${data.tournamentId}`).emit('tournament-started', tournament);\n          \n          // Create tournament table\n          this.createTournamentTable(tournament);\n        }\n      } else {\n        socket.emit('error', { message: 'Could not start tournament' });\n      }\n    } catch (error) {\n      socket.emit('error', { message: (error as Error).message });\n    }\n  }\n\n  private createTournamentTable(tournament: any): void {\n    // Create a special room for the tournament\n    const roomId = `tournament_table_${tournament.id}`;\n    const blinds = this.tournamentEngine.getCurrentBlinds(tournament.id) || { small: 10, big: 20 };\n    \n    const room: Room = {\n      id: roomId,\n      name: `${tournament.name} - Table`,\n      maxPlayers: tournament.maxPlayers,\n      currentPlayers: 0,\n      blinds: blinds,\n      buyIn: tournament.buyIn,\n      isPrivate: true, // Tournament tables are private\n    };\n\n    const gameRoom: GameRoom = {\n      room,\n      players: new Map(),\n    };\n\n    this.rooms.set(roomId, gameRoom);\n\n    // Add tournament participants to the table\n    tournament.participants.forEach((participant: any) => {\n      if (!participant.isEliminated) {\n        const player: Player = {\n          id: participant.userId,\n          name: participant.username,\n          chips: participant.chipCount,\n          cards: [],\n          currentBet: 0,\n          totalBet: 0,\n          position: gameRoom.players.size,\n          isActive: true,\n          isFolded: false,\n          isAllIn: false,\n        };\n\n        gameRoom.players.set(participant.userId, player);\n        this.playerToRoom.set(participant.userId, roomId);\n      }\n    });\n\n    // Start the tournament game\n    if (gameRoom.players.size >= 2) {\n      const game = new PokerGame(roomId, Array.from(gameRoom.players.values()), blinds);\n      gameRoom.game = game;\n      gameRoom.statsTracker = new GameStatsTracker();\n\n      game.startGame();\n      \n      this.io.to(`tournament_${tournament.id}`).emit('tournament-table-ready', {\n        roomId,\n        gameState: game.getGameState()\n      });\n    }\n  }\n}\n","size_bytes":31838},"server/poker/tournamentEngine.ts":{"content":"import { Tournament, TournamentState, TournamentBlindLevel, TournamentPlayer } from '../../shared/types.js';\nimport { storage } from '../storage';\n\nexport class TournamentEngine {\n  private tournaments: Map<string, TournamentState> = new Map();\n  private blindTimers: Map<string, NodeJS.Timeout> = new Map();\n\n  constructor() {\n    this.setupDefaultBlindStructure();\n  }\n\n  private setupDefaultBlindStructure(): TournamentBlindLevel[] {\n    return [\n      { level: 1, smallBlind: 10, bigBlind: 20, duration: 15 },\n      { level: 2, smallBlind: 15, bigBlind: 30, duration: 15 },\n      { level: 3, smallBlind: 25, bigBlind: 50, duration: 15 },\n      { level: 4, smallBlind: 50, bigBlind: 100, duration: 15 },\n      { level: 5, smallBlind: 75, bigBlind: 150, duration: 15 },\n      { level: 6, smallBlind: 100, bigBlind: 200, duration: 15 },\n      { level: 7, smallBlind: 150, bigBlind: 300, duration: 15 },\n      { level: 8, smallBlind: 200, bigBlind: 400, duration: 15 },\n      { level: 9, smallBlind: 300, bigBlind: 600, duration: 15 },\n      { level: 10, smallBlind: 500, bigBlind: 1000, duration: 15 },\n    ];\n  }\n\n  private getPayoutStructure(playerCount: number): { position: number; percentage: number }[] {\n    if (playerCount <= 3) {\n      return [{ position: 1, percentage: 100 }];\n    } else if (playerCount <= 6) {\n      return [\n        { position: 1, percentage: 70 },\n        { position: 2, percentage: 30 },\n      ];\n    } else {\n      return [\n        { position: 1, percentage: 50 },\n        { position: 2, percentage: 30 },\n        { position: 3, percentage: 20 },\n      ];\n    }\n  }\n\n  createTournament(\n    name: string,\n    buyIn: number,\n    maxPlayers: number,\n    blindStructure?: TournamentBlindLevel[]\n  ): TournamentState {\n    const tournamentId = `tournament_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const tournament: TournamentState = {\n      id: tournamentId,\n      name,\n      buyIn,\n      prizePool: 0,\n      maxPlayers,\n      currentPlayers: 0,\n      status: 'waiting',\n      blindStructure: blindStructure || this.setupDefaultBlindStructure(),\n      currentBlindLevel: 0,\n      createdAt: new Date(),\n      participants: [],\n      payoutStructure: this.getPayoutStructure(maxPlayers),\n    };\n\n    this.tournaments.set(tournamentId, tournament);\n    return tournament;\n  }\n\n  joinTournament(tournamentId: string, userId: string, username: string): boolean {\n    const tournament = this.tournaments.get(tournamentId);\n    \n    if (!tournament || tournament.status !== 'waiting' || tournament.currentPlayers >= tournament.maxPlayers) {\n      return false;\n    }\n\n    // Check if player already joined\n    const existingPlayer = tournament.participants.find(p => p.userId === userId);\n    if (existingPlayer) {\n      return false;\n    }\n\n    const player: TournamentPlayer = {\n      userId,\n      username,\n      chipCount: 1500, // Starting chip count\n      isEliminated: false,\n      joinedAt: new Date(),\n    };\n\n    tournament.participants.push(player);\n    tournament.currentPlayers++;\n    tournament.prizePool += tournament.buyIn;\n\n    return true;\n  }\n\n  startTournament(tournamentId: string): boolean {\n    const tournament = this.tournaments.get(tournamentId);\n    \n    if (!tournament || tournament.status !== 'waiting' || tournament.currentPlayers < 2) {\n      return false;\n    }\n\n    tournament.status = 'active';\n    tournament.startedAt = new Date();\n    \n    // Start first blind level\n    this.startBlindTimer(tournamentId);\n    \n    return true;\n  }\n\n  private startBlindTimer(tournamentId: string): void {\n    const tournament = this.tournaments.get(tournamentId);\n    if (!tournament) return;\n\n    const currentLevel = tournament.blindStructure[tournament.currentBlindLevel];\n    if (!currentLevel) return;\n\n    // Clear existing timer\n    const existingTimer = this.blindTimers.get(tournamentId);\n    if (existingTimer) {\n      clearTimeout(existingTimer);\n    }\n\n    // Set next blind increase\n    const nextIncrease = new Date();\n    nextIncrease.setMinutes(nextIncrease.getMinutes() + currentLevel.duration);\n    tournament.nextBlindIncrease = nextIncrease;\n\n    // Start new timer\n    const timer = setTimeout(() => {\n      this.increaseBlinds(tournamentId);\n    }, currentLevel.duration * 60 * 1000); // Convert minutes to milliseconds\n\n    this.blindTimers.set(tournamentId, timer);\n  }\n\n  private increaseBlinds(tournamentId: string): void {\n    const tournament = this.tournaments.get(tournamentId);\n    if (!tournament || tournament.status !== 'active') return;\n\n    if (tournament.currentBlindLevel < tournament.blindStructure.length - 1) {\n      tournament.currentBlindLevel++;\n      console.log(`Tournament ${tournamentId}: Blinds increased to level ${tournament.currentBlindLevel + 1}`);\n      \n      // Update game table if it exists\n      if (tournament.currentTable) {\n        const newLevel = tournament.blindStructure[tournament.currentBlindLevel];\n        tournament.currentTable.blinds = {\n          small: newLevel.smallBlind,\n          big: newLevel.bigBlind,\n        };\n      }\n      \n      // Start next timer\n      this.startBlindTimer(tournamentId);\n    }\n  }\n\n  async eliminatePlayer(tournamentId: string, userId: string): Promise<void> {\n    const tournament = this.tournaments.get(tournamentId);\n    if (!tournament) return;\n\n    const player = tournament.participants.find(p => p.userId === userId);\n    if (!player || player.isEliminated) return;\n\n    player.isEliminated = true;\n    player.eliminatedAt = new Date();\n    player.position = tournament.participants.filter(p => !p.isEliminated).length + 1;\n\n    console.log(`Player ${player.username} eliminated from tournament ${tournamentId} in position ${player.position}`);\n\n    // Check if tournament is finished\n    const remainingPlayers = tournament.participants.filter(p => !p.isEliminated);\n    if (remainingPlayers.length <= 1) {\n      await this.finishTournament(tournamentId);\n    }\n  }\n\n  private async finishTournament(tournamentId: string): Promise<void> {\n    const tournament = this.tournaments.get(tournamentId);\n    if (!tournament) return;\n\n    tournament.status = 'completed';\n    tournament.endedAt = new Date();\n\n    // Clear blind timer\n    const timer = this.blindTimers.get(tournamentId);\n    if (timer) {\n      clearTimeout(timer);\n      this.blindTimers.delete(tournamentId);\n    }\n\n    // Set winner\n    const winner = tournament.participants.find(p => !p.isEliminated);\n    if (winner) {\n      tournament.winnerId = winner.userId;\n      winner.position = 1;\n    }\n\n    // Calculate payouts\n    await this.calculatePayouts(tournament);\n\n    console.log(`Tournament ${tournamentId} completed. Winner: ${winner?.username}`);\n  }\n\n  private async calculatePayouts(tournament: TournamentState): Promise<void> {\n    const totalPrizePool = tournament.prizePool;\n    \n    for (const payout of tournament.payoutStructure) {\n      const player = tournament.participants.find(p => p.position === payout.position);\n      if (player && player.userId) {\n        const amount = (totalPrizePool * payout.percentage) / 100;\n        \n        try {\n          // Create transaction record for tournament winnings (tracking only)\n          await storage.createTransaction({\n            userId: player.userId,\n            type: 'win',\n            amount: amount.toString(),\n            description: `Tournament prize: ${tournament.name} (Position ${payout.position})`,\n            stripeTransactionId: null,\n            status: 'completed',\n          });\n\n          console.log(`Tournament payout: Player ${player.username} (ID: ${player.userId}) won $${amount} for position ${payout.position} (tracking only)`);\n        } catch (error) {\n          console.error(`Error logging tournament winnings for player ${player.username}:`, error);\n        }\n      } else {\n        console.warn(`No payout for position ${payout.position} - player not found or no userId`);\n      }\n    }\n  }\n\n  getTournament(tournamentId: string): TournamentState | undefined {\n    return this.tournaments.get(tournamentId);\n  }\n\n  getAllTournaments(): TournamentState[] {\n    return Array.from(this.tournaments.values());\n  }\n\n  getActiveTournaments(): TournamentState[] {\n    return Array.from(this.tournaments.values()).filter(t => t.status === 'waiting' || t.status === 'active');\n  }\n\n  updatePlayerChips(tournamentId: string, userId: string, newChipCount: number): void {\n    const tournament = this.tournaments.get(tournamentId);\n    if (!tournament) return;\n\n    const player = tournament.participants.find(p => p.userId === userId);\n    if (player) {\n      player.chipCount = newChipCount;\n      \n      // Check for elimination\n      if (newChipCount <= 0 && !player.isEliminated) {\n        this.eliminatePlayer(tournamentId, userId);\n      }\n    }\n  }\n\n  getCurrentBlinds(tournamentId: string): { small: number; big: number } | null {\n    const tournament = this.tournaments.get(tournamentId);\n    if (!tournament) return null;\n\n    const currentLevel = tournament.blindStructure[tournament.currentBlindLevel];\n    return currentLevel ? { small: currentLevel.smallBlind, big: currentLevel.bigBlind } : null;\n  }\n\n  getTimeToNextBlind(tournamentId: string): number | null {\n    const tournament = this.tournaments.get(tournamentId);\n    if (!tournament || !tournament.nextBlindIncrease) return null;\n\n    return tournament.nextBlindIncrease.getTime() - Date.now();\n  }\n}","size_bytes":9417},"client/src/hooks/use-is-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/socketClient.ts":{"content":"import { io, Socket } from 'socket.io-client';\nimport { Room, GameState, Player, Card, PokerAction } from '@shared/types';\n\nclass SocketClient {\n  private socket: Socket | null = null;\n  private isConnected = false;\n\n  connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.socket?.connected) {\n        resolve();\n        return;\n      }\n\n      // 🔧 ENHANCED CLIENT STABILITY - Robuste Connection mit Retry-Logic\n      this.socket = io(window.location.origin, {\n        transports: ['websocket', 'polling'],\n        autoConnect: true,\n        reconnection: true,\n        reconnectionAttempts: 10,\n        reconnectionDelay: 1000,\n        reconnectionDelayMax: 5000,\n        timeout: 10000,\n        forceNew: false\n      });\n\n      this.socket.on('connect', () => {\n        console.log('Connected to server');\n        this.isConnected = true;\n\n        // Send authentication token if available\n        try {\n          const authData = localStorage.getItem('poker-auth');\n          if (authData) {\n            const parsedAuth = JSON.parse(authData);\n            if (parsedAuth.state?.token) {\n              console.log('Sending authentication token...');\n              this.socket?.emit('authenticate', { token: parsedAuth.state.token });\n            }\n          }\n        } catch (error) {\n          console.error('Error reading auth token:', error);\n        }\n\n        resolve();\n      });\n\n      this.socket.on('disconnect', () => {\n        console.log('Disconnected from server');\n        this.isConnected = false;\n      });\n\n      this.socket.on('connect_error', (error) => {\n        console.error('🚨 [CLIENT] Connection error:', error);\n        this.isConnected = false;\n        // Don't reject immediately - let reconnection logic handle it\n        setTimeout(() => reject(error), 5000);\n      });\n\n      // 🔧 Enhanced reconnection handling\n      this.socket.on('reconnect', (attemptNumber) => {\n        console.log(`✅ [CLIENT] Reconnected after ${attemptNumber} attempts`);\n        this.isConnected = true;\n        // Re-authenticate on reconnect\n        try {\n          const authData = localStorage.getItem('poker-auth');\n          if (authData) {\n            const parsedAuth = JSON.parse(authData);\n            if (parsedAuth.state?.token) {\n              this.socket?.emit('authenticate', { token: parsedAuth.state.token });\n            }\n          }\n        } catch (error) {\n          console.error('Error re-authenticating on reconnect:', error);\n        }\n      });\n\n      this.socket.on('reconnect_error', (error) => {\n        console.error('🚨 [CLIENT] Reconnection failed:', error);\n      });\n\n      this.socket.on('reconnect_failed', () => {\n        console.error('🚨 [CLIENT] All reconnection attempts failed');\n        this.isConnected = false;\n      });\n    });\n  }\n\n  disconnect(): void {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n    }\n  }\n\n  // Room management\n  getRooms(): void {\n    this.socket?.emit('get-rooms');\n  }\n\n  createRoom(data: {\n    name: string;\n    maxPlayers: number;\n    blinds: { small: number; big: number };\n    buyIn: number;\n    isPrivate: boolean;\n    password?: string;\n    playerName: string;\n  }): void {\n    console.log('[DEBUG] Emitting create-room event with data:', data);\n    this.socket?.emit('create-room', data);\n  }\n\n  createSinglePlayerRoom(data: {\n    name: string;\n    blinds: { small: number; big: number };\n    buyIn: number;\n    playerName: string;\n    botCount?: number;\n  }): void {\n    console.log('[DEBUG] Emitting create-singleplayer-room event with data:', data);\n    this.socket?.emit('create-singleplayer-room', data);\n  }\n\n  joinRoom(data: {\n    roomId: string;\n    playerName: string;\n    buyIn: number;\n    password?: string;\n  }): void {\n    console.log('[DEBUG] Emitting join-room event with data:', data);\n    this.socket?.emit('join-room', data);\n  }\n\n  leaveRoom(): void {\n    this.socket?.emit('leave-room');\n  }\n\n  // Game actions\n  startGame(): void {\n    this.socket?.emit('start-game');\n  }\n\n  playerAction(action: PokerAction): void {\n    this.socket?.emit('player-action', action);\n  }\n\n  // Event listeners\n  onRoomsList(callback: (rooms: Room[]) => void): void {\n    this.socket?.on('rooms-list', callback);\n  }\n\n  onRoomCreated(callback: (data: { roomId: string; room: Room }) => void): void {\n    this.socket?.on('room-created', callback);\n  }\n\n  onJoinedRoom(callback: (data: {\n    roomId: string;\n    room: Room;\n    players: Player[];\n    gameState?: GameState;\n  }) => void): void {\n    this.socket?.on('joined-room', callback);\n  }\n\n  onPlayerJoined(callback: (data: { player: Player; room: Room }) => void): void {\n    this.socket?.on('player-joined', callback);\n  }\n\n  onPlayerLeft(callback: (data: { playerId: string; room: Room }) => void): void {\n    this.socket?.on('player-left', callback);\n  }\n\n  onGameStarted(callback: (gameState: GameState) => void): void {\n    this.socket?.on('game-started', callback);\n  }\n\n  onGameUpdated(callback: (gameState: GameState) => void): void {\n    this.socket?.on('game-updated', callback);\n  }\n\n  onPlayerAction(callback: (data: { action: any; gameState: GameState }) => void): void {\n    this.socket?.on('player-action', callback);\n  }\n\n  onPrivateCards(callback: (cards: Card[]) => void): void {\n    this.socket?.on('private-cards', callback);\n  }\n\n  onError(callback: (error: { message: string }) => void): void {\n    this.socket?.on('error', callback);\n  }\n\n  // Generic event listener for any event (for custom events like ironic-event)\n  on(event: string, callback: (...args: any[]) => void): void {\n    this.socket?.on(event, callback);\n  }\n\n  // Remove event listeners\n  off(event: string, callback?: (...args: any[]) => void): void {\n    if (callback) {\n      this.socket?.off(event, callback);\n    } else {\n      this.socket?.off(event);\n    }\n  }\n\n  getConnectionStatus(): boolean {\n    return this.isConnected;\n  }\n\n  getSocketId(): string | null {\n    return this.socket?.id || null;\n  }\n}\n\nexport const socketClient = new SocketClient();\n","size_bytes":6116},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst getLocalStorage = (key: string): any =>\n  JSON.parse(window.localStorage.getItem(key) || \"null\");\nconst setLocalStorage = (key: string, value: any): void =>\n  window.localStorage.setItem(key, JSON.stringify(value));\n\nexport { getLocalStorage, setLocalStorage };\n","size_bytes":438},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/auth/AuthModal.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useAuth } from '@/lib/stores/useAuth';\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst AuthModal: React.FC<AuthModalProps> = ({ isOpen, onClose }) => {\n  const { login, register, isLoading, error, clearError } = useAuth();\n  const [loginData, setLoginData] = useState({ username: '', password: '' });\n  const [registerData, setRegisterData] = useState({ \n    username: '', \n    password: '', \n    confirmPassword: '', \n    email: '' \n  });\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      await login(loginData.username, loginData.password);\n      onClose();\n    } catch (error) {\n      // Error is handled by the store\n    }\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (registerData.password !== registerData.confirmPassword) {\n      return;\n    }\n\n    try {\n      await register(\n        registerData.username, \n        registerData.password, \n        registerData.email || undefined\n      );\n      onClose();\n    } catch (error) {\n      // Error is handled by the store\n    }\n  };\n\n  const resetForms = () => {\n    setLoginData({ username: '', password: '' });\n    setRegisterData({ username: '', password: '', confirmPassword: '', email: '' });\n    clearError();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\" onClick={onClose}>\n      <div className=\"w-full max-w-md mx-4\" onClick={(e) => e.stopPropagation()}>\n        <Card className=\"bg-white shadow-2xl\">\n          <CardHeader className=\"text-center bg-white\">\n            <CardTitle className=\"text-2xl text-gray-900\">Bojek Poker</CardTitle>\n            <p className=\"text-gray-600\">Login or create an account to play</p>\n          </CardHeader>\n          <CardContent className=\"bg-white\">\n            <Tabs defaultValue=\"login\" onValueChange={resetForms}>\n              <TabsList className=\"grid w-full grid-cols-2 bg-gray-100\">\n                <TabsTrigger value=\"login\" className=\"text-gray-900\">Login</TabsTrigger>\n                <TabsTrigger value=\"register\" className=\"text-gray-900\">Register</TabsTrigger>\n              </TabsList>\n\n              {error && (\n                <div className=\"mt-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded\">\n                  {error}\n                </div>\n              )}\n\n              <TabsContent value=\"login\" className=\"bg-white\">\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"login-username\">Username</Label>\n                    <Input\n                      id=\"login-username\"\n                      type=\"text\"\n                      value={loginData.username}\n                      onChange={(e) => setLoginData({ ...loginData, username: e.target.value })}\n                      required\n                      disabled={isLoading}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"login-password\">Password</Label>\n                    <Input\n                      id=\"login-password\"\n                      type=\"password\"\n                      value={loginData.password}\n                      onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\n                      required\n                      disabled={isLoading}\n                    />\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button \n                      type=\"submit\" \n                      className=\"flex-1\"\n                      disabled={isLoading}\n                    >\n                      {isLoading ? 'Logging in...' : 'Login'}\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={onClose}\n                      disabled={isLoading}\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </TabsContent>\n\n              <TabsContent value=\"register\" className=\"bg-white\">\n                <form onSubmit={handleRegister} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"register-username\">Username</Label>\n                    <Input\n                      id=\"register-username\"\n                      type=\"text\"\n                      value={registerData.username}\n                      onChange={(e) => setRegisterData({ ...registerData, username: e.target.value })}\n                      required\n                      disabled={isLoading}\n                      minLength={3}\n                      maxLength={20}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"register-email\">Email (optional)</Label>\n                    <Input\n                      id=\"register-email\"\n                      type=\"email\"\n                      value={registerData.email}\n                      onChange={(e) => setRegisterData({ ...registerData, email: e.target.value })}\n                      disabled={isLoading}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"register-password\">Password</Label>\n                    <Input\n                      id=\"register-password\"\n                      type=\"password\"\n                      value={registerData.password}\n                      onChange={(e) => setRegisterData({ ...registerData, password: e.target.value })}\n                      required\n                      disabled={isLoading}\n                      minLength={6}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"register-confirm-password\">Confirm Password</Label>\n                    <Input\n                      id=\"register-confirm-password\"\n                      type=\"password\"\n                      value={registerData.confirmPassword}\n                      onChange={(e) => setRegisterData({ ...registerData, confirmPassword: e.target.value })}\n                      required\n                      disabled={isLoading}\n                    />\n                    {registerData.password !== registerData.confirmPassword && registerData.confirmPassword && (\n                      <p className=\"text-sm text-red-600 mt-1\">Passwords do not match</p>\n                    )}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button \n                      type=\"submit\" \n                      className=\"flex-1\"\n                      disabled={isLoading || registerData.password !== registerData.confirmPassword}\n                    >\n                      {isLoading ? 'Creating Account...' : 'Register'}\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={onClose}\n                      disabled={isLoading}\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthModal;","size_bytes":7742},"client/src/components/auth/UserInfo.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth, type AuthUser } from '@/lib/stores/useAuth';\n\ninterface UserInfoProps {\n  user: AuthUser;\n  showLogout?: boolean;\n  compact?: boolean;\n}\n\nconst UserInfo: React.FC<UserInfoProps> = ({ user, showLogout = true, compact = false }) => {\n  const { logout } = useAuth();\n\n  const winRate = user.handsPlayed > 0 ? ((user.handsWon / user.handsPlayed) * 100).toFixed(1) : '0.0';\n  const gameWinRate = user.gamesPlayed > 0 ? ((user.gamesWon / user.gamesPlayed) * 100).toFixed(1) : '0.0';\n\n  if (compact) {\n    return (\n      <div className=\"bg-gray-800 rounded-lg p-3 text-white\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"font-semibold\">{user.username}</div>\n            <div className=\"text-sm text-green-400\">${parseFloat(user.balance).toLocaleString()}</div>\n          </div>\n          {showLogout && (\n            <Button onClick={logout} variant=\"outline\" size=\"sm\">\n              Logout\n            </Button>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-lg\">{user.username}</CardTitle>\n        {showLogout && (\n          <Button onClick={logout} variant=\"outline\" size=\"sm\">\n            Logout\n          </Button>\n        )}\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Balance */}\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-green-600\">\n            ${parseFloat(user.balance).toLocaleString()}\n          </div>\n          <div className=\"text-sm text-gray-600\">Current Balance</div>\n        </div>\n\n        {/* Statistics Grid */}\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n            <div className=\"font-semibold text-lg\">{user.handsPlayed}</div>\n            <div className=\"text-gray-600\">Hands Played</div>\n          </div>\n          <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n            <div className=\"font-semibold text-lg\">{winRate}%</div>\n            <div className=\"text-gray-600\">Hand Win Rate</div>\n          </div>\n          <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n            <div className=\"font-semibold text-lg\">{user.gamesPlayed}</div>\n            <div className=\"text-gray-600\">Games Played</div>\n          </div>\n          <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n            <div className=\"font-semibold text-lg\">{gameWinRate}%</div>\n            <div className=\"text-gray-600\">Game Win Rate</div>\n          </div>\n        </div>\n\n        {/* Earnings */}\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Total Winnings:</span>\n            <span className=\"font-semibold text-green-600\">\n              +${parseFloat(user.totalWinnings).toLocaleString()}\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Total Losses:</span>\n            <span className=\"font-semibold text-red-600\">\n              -${parseFloat(user.totalLosses).toLocaleString()}\n            </span>\n          </div>\n          <div className=\"flex justify-between border-t pt-2\">\n            <span className=\"text-gray-600\">Net Profit:</span>\n            <span className={`font-semibold ${\n              parseFloat(user.totalWinnings) - parseFloat(user.totalLosses) >= 0 \n                ? 'text-green-600' \n                : 'text-red-600'\n            }`}>\n              {parseFloat(user.totalWinnings) - parseFloat(user.totalLosses) >= 0 ? '+' : ''}\n              ${(parseFloat(user.totalWinnings) - parseFloat(user.totalLosses)).toLocaleString()}\n            </span>\n          </div>\n        </div>\n\n        {/* Badges */}\n        <div className=\"flex gap-2 flex-wrap\">\n          {user.handsWon > 100 && (\n            <Badge variant=\"secondary\">Hand Winner</Badge>\n          )}\n          {user.gamesWon > 10 && (\n            <Badge variant=\"secondary\">Game Champion</Badge>\n          )}\n          {parseFloat(user.totalWinnings) > 10000 && (\n            <Badge variant=\"outline\">High Roller</Badge>\n          )}\n        </div>\n\n        {/* Member since */}\n        <div className=\"text-xs text-gray-500 text-center\">\n          Member since {new Date(user.createdAt).toLocaleDateString()}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default UserInfo;","size_bytes":4753},"client/src/components/poker/Card.tsx":{"content":"import React from 'react';\nimport { Card as CardType } from '@shared/types';\n\ninterface CardProps {\n  card?: CardType;\n  isHidden?: boolean;\n  size?: 'small' | 'medium' | 'large';\n  className?: string;\n}\n\nconst Card: React.FC<CardProps> = ({ \n  card, \n  isHidden = false, \n  size = 'medium',\n  className = '' \n}) => {\n  const getSuitSymbol = (suit: string) => {\n    switch (suit) {\n      case 'hearts': return '♥';\n      case 'diamonds': return '♦';\n      case 'clubs': return '♣';\n      case 'spades': return '♠';\n      default: return '';\n    }\n  };\n\n  const getSuitColor = (suit: string) => {\n    return ['hearts', 'diamonds'].includes(suit) ? 'text-red-500' : 'text-black';\n  };\n\n  const getSizeClasses = () => {\n    switch (size) {\n      case 'small': return 'w-12 h-16 text-xs';\n      case 'medium': return 'w-16 h-24 text-sm';\n      case 'large': return 'w-20 h-28 text-base';\n      default: return 'w-16 h-24 text-sm';\n    }\n  };\n\n  if (isHidden || !card) {\n    return (\n      <div className={`\n        ${getSizeClasses()}\n        bg-gradient-to-br from-red-800 via-red-700 to-red-900 border-2 border-red-900 rounded-lg\n        flex items-center justify-center\n        shadow-lg relative overflow-hidden\n        ${className}\n      `}>\n        {/* 🎲 Classic Card Back Pattern */}\n        <div className=\"absolute inset-0 opacity-20\">\n          <div className=\"w-full h-full bg-gradient-to-br from-red-600 to-red-800\"></div>\n          <div className=\"absolute inset-1 border border-red-500 rounded\"></div>\n        </div>\n        <div className=\"relative text-red-300 text-lg font-bold\">B</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`\n      ${getSizeClasses()}\n      bg-white border-2 border-gray-400 rounded-lg\n      flex flex-col items-center justify-between\n      shadow-xl p-1 relative\n      ${className}\n    `}>\n      {/* Classic card shadow */}\n      <div className=\"absolute inset-0 bg-gray-100 rounded-lg -z-10 transform translate-x-0.5 translate-y-0.5\"></div>\n      <div className={`${getSuitColor(card.suit)} font-bold flex flex-col items-center`}>\n        <span>{card.rank}</span>\n        <span className=\"text-lg leading-none\">{getSuitSymbol(card.suit)}</span>\n      </div>\n      \n      <div className={`${getSuitColor(card.suit)} text-lg leading-none transform rotate-180`}>\n        {getSuitSymbol(card.suit)}\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","size_bytes":2411},"client/src/components/poker/ChipStack.tsx":{"content":"import React from 'react';\n\ninterface ChipStackProps {\n  amount: number;\n  size?: 'small' | 'medium' | 'large';\n  showAmount?: boolean;\n  className?: string;\n}\n\nconst ChipStack: React.FC<ChipStackProps> = ({ \n  amount, \n  size = 'medium', \n  showAmount = true,\n  className = '' \n}) => {\n  const getChipColor = (value: number) => {\n    if (value >= 1000) return 'bg-purple-500 border-purple-600';\n    if (value >= 500) return 'bg-pink-500 border-pink-600';\n    if (value >= 100) return 'bg-black border-gray-700';\n    if (value >= 25) return 'bg-green-500 border-green-600';\n    if (value >= 5) return 'bg-red-500 border-red-600';\n    return 'bg-white border-gray-300';\n  };\n\n  const getSizeClasses = () => {\n    switch (size) {\n      case 'small': return 'w-6 h-6 text-xs';\n      case 'medium': return 'w-8 h-8 text-sm';\n      case 'large': return 'w-10 h-10 text-base';\n      default: return 'w-8 h-8 text-sm';\n    }\n  };\n\n  const getStackHeight = () => {\n    if (amount <= 0) return 0;\n    const baseChips = Math.min(Math.floor(amount / 5), 10); // Max 10 visible chips\n    return Math.max(1, baseChips);\n  };\n\n  const stackHeight = getStackHeight();\n  \n  if (amount <= 0) {\n    return null;\n  }\n\n  return (\n    <div className={`relative inline-block ${className}`}>\n      {/* Chip stack */}\n      <div className=\"relative\">\n        {Array.from({ length: stackHeight }, (_, i) => (\n          <div\n            key={i}\n            className={`\n              ${getSizeClasses()}\n              ${getChipColor(amount)}\n              rounded-full border-2\n              absolute\n              shadow-sm\n            `}\n            style={{\n              bottom: `${i * 2}px`,\n              zIndex: stackHeight - i\n            }}\n          />\n        ))}\n      </div>\n      \n      {/* Amount label */}\n      {showAmount && (\n        <div className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 whitespace-nowrap\">\n          <span className=\"text-xs font-bold text-white bg-black bg-opacity-75 px-2 py-1 rounded\">\n            {amount.toLocaleString()}\n          </span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChipStack;\n","size_bytes":2143},"client/src/components/poker/GameUI.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { usePoker } from '@/lib/stores/usePoker';\nimport { useLanguage } from '@/lib/stores/useLanguage';\nimport { socketClient } from '@/lib/socketClient';\nimport { IronicEventModal } from './IronicEventModal';\n\nconst GameUI: React.FC = () => {\n  const {\n    gameState,\n    selectedAction,\n    raiseAmount,\n    setSelectedAction,\n    setRaiseAmount,\n    isMyTurn,\n    canCheck,\n    canCall,\n    canRaise,\n    getCallAmount,\n    getMinRaise,\n    getMaxRaise,\n    getMyPlayer\n  } = usePoker();\n  \n  const { t } = useLanguage();\n\n  const [customRaise, setCustomRaise] = useState(0);\n  const [currentIronicEvent, setCurrentIronicEvent] = useState<any>(null);\n  const [rouletteNumber, setRouletteNumber] = useState<number | undefined>();\n  const myPlayer = getMyPlayer();\n\n  // 🎰 Listen for Bojek Poker's amazing ironic events! 🎲\n  useEffect(() => {\n    const handleIronicEvent = (eventData: any) => {\n      console.log('[FRONTEND] Received ironic event:', eventData);\n      setCurrentIronicEvent(eventData.event);\n      setRouletteNumber(eventData.rouletteNumber);\n    };\n\n    // Check if socketClient has the on method (connected state)\n    if (socketClient && typeof socketClient.on === 'function') {\n      socketClient.on('ironic-event', handleIronicEvent);\n      \n      return () => {\n        if (socketClient && typeof socketClient.off === 'function') {\n          socketClient.off('ironic-event', handleIronicEvent);\n        }\n      };\n    } else {\n      console.warn('[BOJEK POKER] SocketClient not ready for ironic events');\n    }\n  }, []);\n\n  if (!gameState || !myPlayer || gameState.phase === 'waiting') {\n    return (\n      <>\n        {/* 🎰 Always show Bojek Poker Ironic Events even when waiting! 🎲 */}\n        <IronicEventModal\n          event={currentIronicEvent}\n          rouletteNumber={rouletteNumber}\n          onClose={() => {\n            setCurrentIronicEvent(null);\n            setRouletteNumber(undefined);\n          }}\n        />\n      </>\n    );\n  }\n\n  const handleAction = (actionType: 'fold' | 'call' | 'raise' | 'check' | 'bet' | 'all-in') => {\n    if (!isMyTurn()) return;\n\n    let amount = undefined;\n    if (actionType === 'raise' || actionType === 'bet') {\n      amount = customRaise || raiseAmount;\n    }\n\n    socketClient.playerAction({\n      type: actionType,\n      amount,\n      playerId: myPlayer.id\n    });\n\n    setSelectedAction(null);\n    setCustomRaise(0);\n  };\n\n  const quickRaiseAmounts = [\n    { label: '2x BB', amount: gameState.blinds.big * 2 },\n    { label: '3x BB', amount: gameState.blinds.big * 3 },\n    { label: '5x BB', amount: gameState.blinds.big * 5 },\n    { label: 'Pot', amount: gameState.pot },\n  ];\n\n  if (!isMyTurn()) {\n    return (\n      <>\n        {/* 🎰 Bojek Poker Ironic Event Modal for ALL players! 🎲 */}\n        <IronicEventModal\n          event={currentIronicEvent}\n          rouletteNumber={rouletteNumber}\n          onClose={() => {\n            setCurrentIronicEvent(null);\n            setRouletteNumber(undefined);\n          }}\n        />\n        \n        <div className=\"fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-gradient-to-r from-card via-muted to-card/80 backdrop-blur-lg rounded-xl p-6 shadow-2xl border border-border\">\n          <div className=\"text-center\">\n            <div className=\"text-muted-foreground text-sm mb-2\">{t('waitingForTurn')}</div>\n            <div className=\"text-foreground text-xl font-bold bg-gradient-to-r from-primary via-accent to-secondary bg-clip-text text-transparent\">\n              {t('playerTurn', { playerName: gameState.players[gameState.currentPlayerIndex]?.name || '' })}\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      {/* 🎰 Bojek Poker Ironic Event Modal 🎲 */}\n      <IronicEventModal\n        event={currentIronicEvent}\n        rouletteNumber={rouletteNumber}\n        onClose={() => {\n          setCurrentIronicEvent(null);\n          setRouletteNumber(undefined);\n        }}\n      />\n      \n      <div className=\"fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-gradient-to-r from-card via-muted to-card/90 backdrop-blur-xl rounded-2xl p-8 shadow-2xl border-2 border-primary/30\">\n      <div className=\"flex flex-col gap-4\">\n        {/* Action buttons */}\n        <div className=\"flex gap-3\">\n          {/* Fold */}\n          <Button \n            onClick={() => handleAction('fold')}\n            variant=\"destructive\"\n            size=\"lg\"\n            className=\"\"\n          >\n            🚫 {t('fold')}\n          </Button>\n\n          {/* Check/Call */}\n          {canCheck() ? (\n            <Button \n              onClick={() => handleAction('check')}\n              variant=\"secondary\"\n              size=\"lg\"\n              className=\"\"\n            >\n              ✅ {t('check')}\n            </Button>\n          ) : canCall() ? (\n            <Button \n              onClick={() => handleAction('call')}\n              variant=\"gaming\"\n              size=\"lg\"\n              className=\"\"\n            >\n              💰 {t('call')} ${getCallAmount().toLocaleString()}\n            </Button>\n          ) : null}\n\n          {/* Raise/Bet */}\n          {canRaise() && (\n            <Button \n              onClick={() => setSelectedAction(selectedAction === 'raise' ? null : 'raise')}\n              variant={selectedAction === 'raise' ? 'neon' : 'outline'}\n              size=\"lg\"\n              className=\"\"\n            >\n              🚀 {gameState.currentBet > 0 ? 'Raise' : 'Bet'}\n            </Button>\n          )}\n\n          {/* All-in */}\n          {myPlayer.chips > 0 && (\n            <Button \n              onClick={() => handleAction('all-in')}\n              variant=\"outline\"\n              size=\"lg\"\n              className=\"border-2 border-yellow-400 bg-yellow-400 text-black hover:bg-yellow-300 hover:border-yellow-300 font-bold\"\n            >\n              All-in ${myPlayer.chips.toLocaleString()}\n            </Button>\n          )}\n        </div>\n\n        {/* Raise controls */}\n        {selectedAction === 'raise' && canRaise() && (\n          <div className=\"bg-gray-800 rounded-lg p-4 space-y-4\">\n            <div className=\"flex justify-between text-white text-sm\">\n              <span>Min: ${getMinRaise().toLocaleString()}</span>\n              <span>Max: ${getMaxRaise().toLocaleString()}</span>\n            </div>\n\n            {/* Slider */}\n            <div className=\"space-y-2\">\n              <Slider\n                value={[customRaise || getMinRaise()]}\n                onValueChange={([value]) => setCustomRaise(value)}\n                min={getMinRaise()}\n                max={getMaxRaise()}\n                step={gameState.blinds.small}\n                className=\"w-full\"\n              />\n              <div className=\"text-center text-white font-bold\">\n                ${(customRaise || getMinRaise()).toLocaleString()}\n              </div>\n            </div>\n\n            {/* Quick bet buttons */}\n            <div className=\"flex gap-2 flex-wrap\">\n              {quickRaiseAmounts.map(({ label, amount }) => (\n                <Button\n                  key={label}\n                  onClick={() => setCustomRaise(Math.min(amount, getMaxRaise()))}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  disabled={amount > getMaxRaise()}\n                  className={amount > getMaxRaise() \n                    ? \"bg-gray-600 border-gray-500 text-gray-400 cursor-not-allowed\" \n                    : \"border-2 border-white bg-gray-700 text-white hover:bg-white hover:text-black font-bold\"\n                  }\n                >\n                  {label}\n                </Button>\n              ))}\n            </div>\n\n            {/* Confirm raise */}\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={() => handleAction(gameState.currentBet > 0 ? 'raise' : 'bet')}\n                variant=\"default\"\n                className=\"flex-1 bg-purple-600 hover:bg-purple-700 text-white font-bold\"\n                disabled={customRaise < getMinRaise()}\n              >\n                {gameState.currentBet > 0 ? 'Raise' : 'Bet'} ${(customRaise || getMinRaise()).toLocaleString()}\n              </Button>\n              <Button\n                onClick={() => setSelectedAction(null)}\n                variant=\"outline\"\n                className=\"border-2 border-gray-400 bg-gray-400 text-black hover:bg-gray-300 font-bold\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n    </>\n  );\n};\n\nexport default GameUI;\n","size_bytes":8726},"client/src/components/poker/Lobby.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { usePoker } from '@/lib/stores/usePoker';\nimport { useAuth } from '@/lib/stores/useAuth';\nimport { useLanguage } from '@/lib/stores/useLanguage';\nimport { socketClient } from '@/lib/socketClient';\nimport { Room } from '@shared/types';\nimport AuthModal from '@/components/auth/AuthModal';\nimport UserInfo from '@/components/auth/UserInfo';\nimport { TournamentLobby } from './TournamentLobby';\n\nconst Lobby: React.FC = () => {\n  const { \n    rooms, \n    isConnected, \n    setShowLobby,\n    setCurrentRoomId,\n    setMyPlayerId \n  } = usePoker();\n\n  const { user, isAuthenticated, fetchProfile } = useAuth();\n  const { t } = useLanguage();\n\n  const [playerName, setPlayerName] = useState('');\n  const [roomName, setRoomName] = useState('');\n  const [maxPlayers, setMaxPlayers] = useState(6);\n  const [smallBlind, setSmallBlind] = useState(5);\n  const [bigBlind, setBigBlind] = useState(10);\n  const [buyIn, setBuyIn] = useState(1000);\n  const [isPrivate, setIsPrivate] = useState(false);\n  const [password, setPassword] = useState('');\n  const [joinPassword, setJoinPassword] = useState('');\n  const [selectedRoom, setSelectedRoom] = useState<string>('');\n  const [loading, setLoading] = useState(false);\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const [showTournamentLobby, setShowTournamentLobby] = useState(false);\n\n  useEffect(() => {\n    if (isConnected) {\n      socketClient.getRooms();\n    }\n  }, [isConnected]);\n\n  useEffect(() => {\n    // Set player name from authenticated user\n    if (user) {\n      setPlayerName(user.username);\n    }\n  }, [user]);\n\n  useEffect(() => {\n    // Fetch profile if token exists but user is not loaded\n    if (isAuthenticated && !user) {\n      fetchProfile();\n    }\n  }, [isAuthenticated, user, fetchProfile]);\n\n  useEffect(() => {\n    // Only set up listeners when socket is connected\n    if (!isConnected) {\n      console.log('[DEBUG] Socket not connected, skipping event listener setup');\n      return;\n    }\n\n    console.log('[DEBUG] Setting up socket event listeners');\n    \n    // Set up socket event listeners\n    const handleRoomCreated = (data: { roomId: string; room: Room }) => {\n      console.log('[DEBUG] Room created event received:', data);\n      setLoading(false);\n      setCurrentRoomId(data.roomId);\n      setMyPlayerId(socketClient.getSocketId());\n      setShowLobby(false);\n    };\n\n    const handleJoinedRoom = (data: {\n      roomId: string;\n      room: Room;\n      players: any[];\n      gameState?: any;\n    }) => {\n      console.log('[DEBUG] Joined room event received:', data);\n      setLoading(false);\n      setCurrentRoomId(data.roomId);\n      setMyPlayerId(socketClient.getSocketId());\n      setShowLobby(false);\n    };\n\n    const handleError = (error: { message: string }) => {\n      console.log('[DEBUG] Error event received:', error);\n      setLoading(false);\n      alert(error.message);\n    };\n\n    socketClient.onRoomCreated(handleRoomCreated);\n    socketClient.onJoinedRoom(handleJoinedRoom);\n    socketClient.onError(handleError);\n\n    console.log('[DEBUG] Event listeners set up successfully');\n\n    return () => {\n      console.log('[DEBUG] Cleaning up event listeners');\n      socketClient.off('room-created', handleRoomCreated);\n      socketClient.off('joined-room', handleJoinedRoom);\n      socketClient.off('error', handleError);\n    };\n  }, [isConnected, setCurrentRoomId, setMyPlayerId, setShowLobby]);\n\n  const handleCreateRoom = async () => {\n    if (!playerName.trim() || !roomName.trim()) {\n      alert(t('playerNameAndRoomNameRequired'));\n      return;\n    }\n\n    setLoading(true);\n    socketClient.createRoom({\n      name: roomName,\n      maxPlayers,\n      blinds: { small: smallBlind, big: bigBlind },\n      buyIn,\n      isPrivate,\n      password: isPrivate ? password : undefined,\n      playerName: playerName.trim()\n    });\n  };\n\n  const handleCreateSinglePlayerRoom = async () => {\n    if (!playerName.trim()) {\n      alert(t('playerNameRequired'));\n      return;\n    }\n\n    setLoading(true);\n    socketClient.createSinglePlayerRoom({\n      name: t('singlePlayerRoomName', { playerName }),\n      blinds: { small: smallBlind, big: bigBlind },\n      buyIn,\n      playerName: playerName.trim(),\n      botCount: 3 // 3 bots + 1 human = 4 players total\n    });\n  };\n\n  const handleJoinRoom = async (roomId: string) => {\n    if (!playerName.trim()) {\n      alert(t('playerNameRequired'));\n      return;\n    }\n\n    const room = rooms.find(r => r.id === roomId);\n    if (!room) return;\n\n    setLoading(true);\n    socketClient.joinRoom({\n      roomId,\n      playerName: playerName.trim(),\n      buyIn: room.buyIn,\n      password: room.isPrivate ? joinPassword : undefined\n    });\n  };\n\n  const refreshRooms = () => {\n    socketClient.getRooms();\n  };\n\n  // Show auth modal if not authenticated\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-green-900 flex items-center justify-center\">\n        <Card className=\"w-96\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center mb-4\">\n              <h1 className=\"text-2xl font-bold text-white mb-2\">{t('appName')}</h1>\n              <p className=\"text-green-200\">{t('appSubtitle')}</p>\n            </div>\n            <Button \n              onClick={() => setShowAuthModal(true)}\n              className=\"w-full\"\n              size=\"lg\"\n            >\n              {t('login')} / {t('register')}\n            </Button>\n          </CardContent>\n        </Card>\n        <AuthModal \n          isOpen={showAuthModal} \n          onClose={() => setShowAuthModal(false)} \n        />\n      </div>\n    );\n  }\n\n  if (!isConnected) {\n    return (\n      <div className=\"min-h-screen bg-green-900 flex items-center justify-center\">\n        <Card className=\"w-96\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold mb-2\">{t('connectingToServer')}</div>\n              <div className=\"animate-spin w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto\"></div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (showTournamentLobby) {\n    return (\n      <TournamentLobby \n        playerName={playerName} \n        onJoinTable={(roomId) => {\n          setCurrentRoomId(roomId);\n          setMyPlayerId(socketClient.getSocketId());\n          setShowLobby(false);\n          setShowTournamentLobby(false);\n        }}\n        onBackToLobby={() => setShowTournamentLobby(false)}\n      />\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-green-800 to-green-900 p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"flex justify-between items-start mb-8\">\n          <div>\n            <h1 className=\"text-4xl font-bold text-white mb-2\">{t('appName')}</h1>\n            <p className=\"text-green-200\">{t('createRoomSubtitle')}</p>\n          </div>\n          {user && (\n            <div className=\"w-80\">\n              <UserInfo user={user} compact={true} />\n            </div>\n          )}\n        </div>\n\n        <Tabs defaultValue=\"join\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4 mb-6\">\n            <TabsTrigger value=\"join\">{t('joinRoom')}</TabsTrigger>\n            <TabsTrigger value=\"create\">{t('createRoom')}</TabsTrigger>\n            <TabsTrigger value=\"singleplayer\">{t('againstComputer')}</TabsTrigger>\n            <TabsTrigger value=\"tournaments\">{t('tournaments')}</TabsTrigger>\n          </TabsList>\n\n          {/* Player Name Input */}\n          <div className=\"mb-6\">\n            <Card>\n              <CardContent className=\"pt-4\">\n                <div className=\"flex gap-4 items-end\">\n                  <div className=\"flex-1\">\n                    <Label htmlFor=\"playerName\">{t('playerName')}</Label>\n                    <Input\n                      id=\"playerName\"\n                      placeholder={t('playerName')}\n                      value={playerName}\n                      onChange={(e) => setPlayerName(e.target.value)}\n                      maxLength={20}\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <TabsContent value=\"join\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>{t('availableRooms')}</CardTitle>\n                <Button onClick={refreshRooms} variant=\"outline\" size=\"sm\">\n                  {t('refresh')}\n                </Button>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {rooms.length === 0 ? (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      {t('noRoomsAvailable')}\n                    </div>\n                  ) : (\n                    rooms.map((room) => (\n                      <div\n                        key={room.id}\n                        className=\"border rounded-lg p-4 hover:bg-gray-50 transition-colors\"\n                      >\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">{room.name}</h3>\n                            <div className=\"flex gap-2 items-center text-sm text-gray-600\">\n                              <span>{t('players')}: {room.currentPlayers}/{room.maxPlayers}</span>\n                              <span>•</span>\n                              <span>{t('buyIn').replace(' ($)', '')}: ${room.buyIn.toLocaleString()}</span>\n                              <span>•</span>\n                              <span>{t('blinds')}: ${room.blinds.small}/${room.blinds.big}</span>\n                              {room.isPrivate && <Badge variant=\"secondary\">{t('privateRoom')}</Badge>}\n                            </div>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            {room.isPrivate && (\n                              <Input\n                                type=\"password\"\n                                placeholder={t('password')}\n                                value={selectedRoom === room.id ? joinPassword : ''}\n                                onChange={(e) => {\n                                  setSelectedRoom(room.id);\n                                  setJoinPassword(e.target.value);\n                                }}\n                                className=\"w-32\"\n                              />\n                            )}\n                            <Button\n                              onClick={() => handleJoinRoom(room.id)}\n                              disabled={loading || room.currentPlayers >= room.maxPlayers}\n                              size=\"sm\"\n                            >\n                              {room.currentPlayers >= room.maxPlayers ? t('full') : t('join')}\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"create\">\n            <Card>\n              <CardHeader>\n                <CardTitle>{t('createRoom')}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"roomName\">{t('roomName')}</Label>\n                    <Input\n                      id=\"roomName\"\n                      placeholder={t('roomName')}\n                      value={roomName}\n                      onChange={(e) => setRoomName(e.target.value)}\n                      maxLength={30}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"maxPlayers\">{t('maxPlayers')}</Label>\n                    <Input\n                      id=\"maxPlayers\"\n                      type=\"number\"\n                      min={3}\n                      max={6}\n                      value={maxPlayers}\n                      onChange={(e) => setMaxPlayers(Math.max(3, Math.min(6, parseInt(e.target.value) || 3)))}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"smallBlind\">{t('smallBlind')}</Label>\n                    <Input\n                      id=\"smallBlind\"\n                      type=\"number\"\n                      min={1}\n                      value={smallBlind}\n                      onChange={(e) => {\n                        const value = parseInt(e.target.value) || 1;\n                        setSmallBlind(value);\n                        setBigBlind(value * 2);\n                      }}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"bigBlind\">{t('bigBlind')}</Label>\n                    <Input\n                      id=\"bigBlind\"\n                      type=\"number\"\n                      min={2}\n                      value={bigBlind}\n                      onChange={(e) => setBigBlind(parseInt(e.target.value) || 2)}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"buyIn\">{t('buyIn')}</Label>\n                    <Input\n                      id=\"buyIn\"\n                      type=\"number\"\n                      min={100}\n                      value={buyIn}\n                      onChange={(e) => setBuyIn(parseInt(e.target.value) || 100)}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"private\"\n                    checked={isPrivate}\n                    onCheckedChange={setIsPrivate}\n                  />\n                  <Label htmlFor=\"private\">{t('privateRoom')}</Label>\n                </div>\n\n                {isPrivate && (\n                  <div>\n                    <Label htmlFor=\"password\">{t('roomPassword')}</Label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      placeholder={t('roomPassword')}\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                    />\n                  </div>\n                )}\n\n                <Button\n                  onClick={handleCreateRoom}\n                  disabled={loading || !playerName.trim() || !roomName.trim()}\n                  className=\"w-full\"\n                  size=\"lg\"\n                >\n                  {loading ? t('creating') : t('createRoom')}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"singleplayer\">\n            <Card>\n              <CardHeader>\n                <CardTitle>{t('againstComputer')}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div className=\"text-center py-4\">\n                    <p className=\"text-gray-600 mb-4\">\n                      {t('againstComputerDesc')}\n                    </p>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"spBuyIn\">{t('buyIn')}</Label>\n                      <Input\n                        id=\"spBuyIn\"\n                        type=\"number\"\n                        placeholder=\"10000\"\n                        value={buyIn}\n                        onChange={(e) => setBuyIn(Number(e.target.value))}\n                        min={1000}\n                        max={1000000}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"spSmallBlind\">{t('smallBlind')}</Label>\n                      <Input\n                        id=\"spSmallBlind\"\n                        type=\"number\"\n                        placeholder=\"25\"\n                        value={smallBlind}\n                        onChange={(e) => setSmallBlind(Number(e.target.value))}\n                        min={1}\n                        max={1000}\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"spBigBlind\">{t('bigBlind')}</Label>\n                    <Input\n                      id=\"spBigBlind\"\n                      type=\"number\"\n                      placeholder=\"50\"\n                      value={bigBlind}\n                      onChange={(e) => setBigBlind(Number(e.target.value))}\n                      min={smallBlind * 2}\n                      max={10000}\n                    />\n                  </div>\n\n                  <Button\n                    onClick={handleCreateSinglePlayerRoom}\n                    disabled={loading || !playerName.trim()}\n                    className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                    size=\"lg\"\n                  >\n                    {loading ? t('createGame') : t('againstComputer')}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"tournaments\">\n            <Card>\n              <CardHeader>\n                <CardTitle>{t('tournamentMode')}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-600 mb-4\">\n                    {t('tournamentDescription')}\n                  </p>\n                  <Button\n                    onClick={() => setShowTournamentLobby(true)}\n                    size=\"lg\"\n                    className=\"bg-yellow-600 hover:bg-yellow-700 text-white\"\n                  >\n                    {t('enterTournamentLobby')}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n\nexport default Lobby;\n","size_bytes":18740},"client/src/components/poker/PlayerPosition.tsx":{"content":"import React from 'react';\nimport { Player } from '@shared/types';\nimport Card from './Card';\nimport ChipStack from './ChipStack';\n\ninterface PlayerPositionProps {\n  player: Player;\n  isCurrentPlayer: boolean;\n  isMyself: boolean;\n  showCards: boolean;\n  myCards?: import('@shared/types').Card[];\n  position: number;\n  totalPositions: number;\n}\n\nconst PlayerPosition: React.FC<PlayerPositionProps> = ({\n  player,\n  isCurrentPlayer,\n  isMyself,\n  showCards,\n  myCards,\n  position,\n  totalPositions\n}) => {\n  const getPositionClasses = () => {\n    // 🃏 Cards positioned OUTSIDE the green felt table (800x500px)\n    const getOptimalLayout = (total: number) => {\n      // Table is 800x500px, so positions need to be beyond these boundaries\n      if (total <= 2) return { radiusX: 480, radiusY: 320, startAngle: 180 }; // Far outside for 2 players\n      if (total <= 4) return { radiusX: 450, radiusY: 300, startAngle: 135 }; // Outside corners\n      if (total <= 6) return { radiusX: 430, radiusY: 280, startAngle: 90 };  // Around table edges\n      return { radiusX: 420, radiusY: 270, startAngle: 60 }; // Tight but outside for 7-8 players\n    };\n    \n    const { radiusX, radiusY, startAngle } = getOptimalLayout(totalPositions);\n    \n    // Calculate angle with dynamic spacing\n    const angleStep = 360 / totalPositions;\n    const angle = (position * angleStep + startAngle) * Math.PI / 180;\n    \n    // Oval positioning (ellipse)\n    const x = Math.cos(angle) * radiusX;\n    const y = Math.sin(angle) * radiusY;\n    \n    return {\n      transform: `translate(${x}px, ${y}px)`,\n      position: 'absolute' as const,\n      top: '50%',\n      left: '50%',\n      marginTop: '-50px',\n      marginLeft: '-50px'\n    };\n  };\n\n  const getPlayerStatus = () => {\n    if (player.isFolded) return 'Folded';\n    if (player.isAllIn) return 'All-in';\n    if (!player.isActive) return 'Inactive';\n    if (isCurrentPlayer) return 'Turn';\n    return player.lastAction || 'Waiting';\n  };\n\n  const getStatusColor = () => {\n    if (player.isFolded) return 'text-red-500';\n    if (player.isAllIn) return 'text-yellow-500';\n    if (!player.isActive) return 'text-gray-500';\n    if (isCurrentPlayer) return 'text-green-500';\n    return 'text-blue-500';\n  };\n\n  const cardsToShow = isMyself && myCards ? myCards : player.cards;\n\n  return (\n    <div style={getPositionClasses()} className=\"flex flex-col items-center\">\n      {/* Player info */}\n      <div className={`\n        bg-black bg-opacity-80 rounded-lg p-2 min-w-28 backdrop-blur-sm\n        border-2 shadow-lg\n        ${isCurrentPlayer ? 'border-amber-400 bg-amber-900 bg-opacity-40' : 'border-amber-600 border-opacity-60'}\n        ${isMyself ? 'bg-green-900 bg-opacity-60 border-green-400' : ''}\n      `}>\n        {/* Player name and status */}\n        <div className=\"text-center mb-1\">\n          <div className=\"text-white font-semibold text-xs truncate\">\n            {player.name}\n            {isMyself && <span className=\"text-green-400 ml-1\">(You)</span>}\n          </div>\n          <div className={`text-xs ${getStatusColor()}`}>\n            {getPlayerStatus()}\n          </div>\n        </div>\n\n        {/* Chips */}\n        <div className=\"text-center mb-1\">\n          <div className=\"text-amber-200 text-xs font-bold\">\n            ${player.chips.toLocaleString()}\n          </div>\n          {player.currentBet > 0 && (\n            <div className=\"text-amber-400 text-xs\">\n              Bet: ${player.currentBet.toLocaleString()}\n            </div>\n          )}\n        </div>\n\n        {/* Cards */}\n        <div className=\"flex justify-center gap-1\">\n          {showCards && cardsToShow.length > 0 ? (\n            cardsToShow.map((card, index) => (\n              <Card \n                key={card?.id || index} \n                card={card} \n                size=\"small\"\n              />\n            ))\n          ) : (\n            // Show hidden cards or card count\n            Array.from({ length: player.cards.length || 2 }, (_, index) => (\n              <Card \n                key={index} \n                isHidden={true} \n                size=\"small\"\n              />\n            ))\n          )}\n        </div>\n      </div>\n\n      {/* Current bet chips */}\n      {player.currentBet > 0 && (\n        <div className=\"mt-2\">\n          <ChipStack \n            amount={player.currentBet} \n            size=\"small\" \n            showAmount={true}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PlayerPosition;\n","size_bytes":4472},"client/src/components/poker/PokerTable.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { usePoker } from '@/lib/stores/usePoker';\nimport { socketClient } from '@/lib/socketClient';\nimport PlayerPosition from './PlayerPosition';\nimport Card from './Card';\nimport ChipStack from './ChipStack';\n\n// 🟢 Classic 2D Poker Table with Green Felt\nconst ClassicTable2D: React.FC = () => {\n  return (\n    <div className=\"relative w-full h-full flex items-center justify-center\">\n      {/* 🎰 Oval Green Felt Table */}\n      <div className=\"relative\">\n        {/* Table Surface - Green Felt */}\n        <div \n          className=\"w-[800px] h-[500px] bg-gradient-to-br from-green-800 via-green-700 to-green-600 rounded-[400px/250px] border-8 border-amber-900 shadow-2xl relative\"\n          style={{\n            background: 'radial-gradient(ellipse at center, #166534 0%, #15803d 50%, #166534 100%)',\n            boxShadow: 'inset 0 0 50px rgba(0,0,0,0.3), 0 10px 30px rgba(0,0,0,0.5)'\n          }}\n        >\n          {/* Felt Texture Overlay */}\n          <div \n            className=\"absolute inset-0 rounded-[400px/250px] opacity-20\"\n            style={{\n              background: 'repeating-linear-gradient(45deg, transparent, transparent 2px, rgba(255,255,255,0.1) 2px, rgba(255,255,255,0.1) 4px)'\n            }}\n          />\n          \n          {/* 🎲 Center Logo & Pot Area */}\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center text-center\">\n            <h1 className=\"text-2xl font-bold text-amber-400 mb-1 drop-shadow-lg tracking-wider\">\n              BOJEK POKER\n            </h1>\n            <p className=\"text-xs text-amber-200 opacity-60 tracking-wide mb-3\">\n              THE MOST IRONIC POKER GAME\n            </p>\n          </div>\n          \n          {/* Decorative Corner Dots */}\n          {[0, 1, 2, 3].map((index) => {\n            const positions = [\n              { top: '20%', left: '15%' },  // Top-left\n              { top: '20%', right: '15%' }, // Top-right  \n              { bottom: '20%', left: '15%' }, // Bottom-left\n              { bottom: '20%', right: '15%' } // Bottom-right\n            ];\n            return (\n              <div\n                key={index}\n                className=\"absolute w-6 h-6 bg-amber-500 rounded-full shadow-lg border-2 border-amber-600\"\n                style={positions[index]}\n              />\n            );\n          })}\n        </div>\n        \n        {/* Wooden Table Edge */}\n        <div \n          className=\"absolute inset-0 w-[816px] h-[516px] -top-2 -left-2 bg-gradient-to-b from-amber-800 to-amber-900 rounded-[408px/258px] -z-10\"\n          style={{\n            background: 'linear-gradient(145deg, #92400e 0%, #78350f 50%, #451a03 100%)'\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst PokerTable: React.FC = () => {\n  const { gameState, myCards, myPlayerId, setCurrentRoom, setGameState, setMyCards, setShowLobby } = usePoker();\n  const [showWinners, setShowWinners] = useState(false);\n  \n  // 🏆 Auto-hide winners after 5 seconds to continue game\n  useEffect(() => {\n    if (gameState?.winners) {\n      setShowWinners(true);\n      const timer = setTimeout(() => {\n        setShowWinners(false);\n      }, 5000); // Auto-continue after 5 seconds\n      \n      return () => clearTimeout(timer);\n    }\n  }, [gameState?.winners]);\n\n  if (!gameState) {\n    return (\n      <div className=\"w-full h-full flex items-center justify-center bg-gradient-to-br from-background via-muted to-secondary/20\">\n        <div className=\"text-center\">\n          <div className=\"text-4xl font-bold bg-gradient-to-r from-primary via-accent to-secondary bg-clip-text text-transparent mb-4\">\n            🎰 BOJEK POKER 🎲\n          </div>\n          <div className=\"text-foreground text-xl\">\n            Waiting for the most ironic game to start...\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"relative w-full h-full bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 overflow-hidden\">\n      {/* 🟢 2D Classic Table */}\n      <div className=\"absolute inset-0\">\n        <ClassicTable2D />\n      </div>\n\n      {/* 🃏 Game UI Overlay */}\n      <div className=\"absolute inset-0 pointer-events-none\">\n        {/* 🟢 INTEGRATED POT AREA - Inside Table Surface */}\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10\">\n          <div className=\"flex flex-col items-center\">\n            {/* 🟢 POT NAHTLOS IN FILZ INTEGRIERT */}\n            <div className=\"relative\">\n              {/* Pot Info direkt auf Filz ohne Box */}\n              <div className=\"text-center mb-3\">\n                <div className=\"text-amber-300 text-xl font-bold drop-shadow-lg\" style={{ textShadow: '2px 2px 4px rgba(0,0,0,0.8)' }}>\n                  ${gameState.pot.toLocaleString()}\n                </div>\n                <div className=\"text-amber-200 text-xs opacity-90 drop-shadow\" style={{ textShadow: '1px 1px 2px rgba(0,0,0,0.8)' }}>\n                  {gameState.phase} • Round {gameState.round}\n                </div>\n                {gameState.currentBet > 0 && (\n                  <div className=\"text-amber-300 text-xs mt-1 opacity-90 drop-shadow\" style={{ textShadow: '1px 1px 2px rgba(0,0,0,0.8)' }}>\n                    Current Bet: ${gameState.currentBet.toLocaleString()}\n                  </div>\n                )}\n              </div>\n              \n              {/* Pot chips seitlich versetzt um Überlappung zu vermeiden */}\n              {gameState.pot > 0 && (\n                <div className=\"flex justify-center mt-2 -ml-16\">\n                  <ChipStack amount={gameState.pot} size=\"medium\" showAmount={false} />\n                </div>\n              )}\n            </div>\n\n            {/* Community cards on felt */}\n            <div className=\"flex justify-center gap-2\">\n              {gameState.communityCards.map((card, index) => (\n                <Card key={card.id} card={card} size=\"medium\" className=\"shadow-lg\" />\n              ))}\n              \n              {/* Placeholder for remaining community cards */}\n              {Array.from({ \n                length: Math.max(0, 5 - gameState.communityCards.length) \n              }, (_, index) => (\n                <Card \n                  key={`placeholder-${index}`} \n                  isHidden \n                  size=\"medium\" \n                  className=\"opacity-30\"\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Players around the table */}\n        <div className=\"absolute inset-0 z-30\">\n          {gameState.players.map((player, index) => (\n            <PlayerPosition\n              key={player.id}\n              player={player}\n              isCurrentPlayer={gameState.currentPlayerIndex === index}\n              isMyself={player.id === myPlayerId}\n              showCards={gameState.phase === 'showdown' || player.id === myPlayerId}\n              myCards={player.id === myPlayerId ? myCards : undefined}\n              position={index}\n              totalPositions={gameState.players.length}\n            />\n          ))}\n        </div>\n\n        {/* Game phase indicator */}\n        <div className=\"absolute top-4 left-4 bg-black bg-opacity-80 rounded-lg p-3 text-white pointer-events-auto border border-amber-600 z-40\">\n          <div className=\"text-xs opacity-75\">Phase</div>\n          <div className=\"text-sm font-bold capitalize text-amber-400\">{gameState.phase}</div>\n          <div className=\"text-xs\">\n            Blinds: ${gameState.blinds.small}/${gameState.blinds.big}\n          </div>\n        </div>\n\n        {/* Winners display with Continue Navigation */}\n        {gameState.winners && showWinners && (\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-black bg-opacity-95 rounded-xl p-8 text-white text-center pointer-events-auto border-2 border-amber-500 shadow-2xl z-50\">\n            <h2 className=\"text-2xl font-bold mb-6 text-amber-400\">🏆 Round Complete!</h2>\n            \n            {/* Winners List */}\n            <div className=\"mb-6\">\n              {gameState.winners.map((winner, index) => (\n                <div key={index} className=\"mb-3 p-3 bg-green-900 bg-opacity-40 rounded-lg border border-green-500 border-opacity-50\">\n                  <div className=\"font-semibold text-amber-200 text-lg\">\n                    {gameState.players.find(p => p.id === winner.playerId)?.name}\n                  </div>\n                  <div className=\"text-sm opacity-75 mb-1\">{winner.hand}</div>\n                  <div className=\"text-xl font-bold text-green-400\">\n                    +${winner.amount.toLocaleString()}\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            {/* 🎮 Continue Navigation */}\n            <div className=\"flex gap-4 justify-center\">\n              <button \n                onClick={() => {\n                  // Hide winners and continue (next round will auto-start)\n                  setShowWinners(false);\n                }}\n                className=\"px-6 py-3 bg-amber-600 hover:bg-amber-700 text-black font-bold rounded-lg transition-colors border-2 border-amber-400\"\n              >\n                🎆 Continue Game\n              </button>\n              \n              <button \n                onClick={() => {\n                  // 🏠 Properly return to lobby using socket client\n                  socketClient.leaveRoom();\n                  setCurrentRoom(null);\n                  setGameState(null);\n                  setMyCards([]);\n                  setShowLobby(true);\n                }}\n                className=\"px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white font-bold rounded-lg transition-colors border-2 border-gray-400\"\n              >\n                🏠 Return to Lobby\n              </button>\n            </div>\n            \n            {/* Auto-continue countdown */}\n            <div className=\"mt-4 text-amber-300 text-sm opacity-75\">\n              ⏱️ Game continues automatically in 5 seconds...\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PokerTable;\n","size_bytes":10188},"client/src/components/poker/TournamentLobby.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { io, Socket } from 'socket.io-client';\nimport { TournamentState, TournamentBlindLevel } from '../../../../shared/types';\n\ninterface TournamentLobbyProps {\n  playerName: string;\n  onJoinTable: (roomId: string) => void;\n  onBackToLobby?: () => void;\n}\n\nexport const TournamentLobby: React.FC<TournamentLobbyProps> = ({ playerName, onJoinTable, onBackToLobby }) => {\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [tournaments, setTournaments] = useState<TournamentState[]>([]);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [newTournament, setNewTournament] = useState({\n    name: '',\n    buyIn: 100,\n    maxPlayers: 6,\n  });\n\n  useEffect(() => {\n    const newSocket = io();\n    setSocket(newSocket);\n\n    newSocket.on('connect', () => {\n      console.log('Connected to tournament socket');\n      newSocket.emit('get-tournaments');\n    });\n\n    newSocket.on('tournaments-list', (tournamentList: TournamentState[]) => {\n      setTournaments(tournamentList);\n    });\n\n    newSocket.on('tournament-created', (tournament: TournamentState) => {\n      console.log('Tournament created:', tournament);\n      setTournaments(prev => [...prev, tournament]);\n      setShowCreateForm(false);\n    });\n\n    newSocket.on('tournament-updated', (tournament: TournamentState) => {\n      setTournaments(prev => \n        prev.map(t => t.id === tournament.id ? tournament : t)\n      );\n    });\n\n    newSocket.on('tournament-joined', (tournament: TournamentState) => {\n      console.log('Joined tournament:', tournament);\n    });\n\n    newSocket.on('tournament-started', (tournament: TournamentState) => {\n      console.log('Tournament started:', tournament);\n    });\n\n    newSocket.on('tournament-table-ready', (data: { roomId: string; gameState: any }) => {\n      console.log('Tournament table ready:', data);\n      onJoinTable(data.roomId);\n    });\n\n    newSocket.on('error', (error: { message: string }) => {\n      alert(`Error: ${error.message}`);\n    });\n\n    return () => {\n      newSocket.disconnect();\n    };\n  }, [onJoinTable]);\n\n  const createTournament = () => {\n    if (!socket || !newTournament.name.trim()) return;\n\n    const blindStructure: TournamentBlindLevel[] = [\n      { level: 1, smallBlind: 10, bigBlind: 20, duration: 15 },\n      { level: 2, smallBlind: 15, bigBlind: 30, duration: 15 },\n      { level: 3, smallBlind: 25, bigBlind: 50, duration: 15 },\n      { level: 4, smallBlind: 50, bigBlind: 100, duration: 15 },\n      { level: 5, smallBlind: 75, bigBlind: 150, duration: 15 },\n    ];\n\n    socket.emit('create-tournament', {\n      ...newTournament,\n      blindStructure,\n      playerName,\n    });\n  };\n\n  const joinTournament = (tournamentId: string) => {\n    if (!socket) return;\n    socket.emit('join-tournament', { tournamentId, playerName });\n  };\n\n  const startTournament = (tournamentId: string) => {\n    if (!socket) return;\n    socket.emit('start-tournament', { tournamentId });\n  };\n\n  const formatTime = (minutes: number): string => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;\n  };\n\n  const getTournamentStatus = (tournament: TournamentState): string => {\n    switch (tournament.status) {\n      case 'waiting':\n        return `Wartend (${tournament.currentPlayers}/${tournament.maxPlayers})`;\n      case 'active':\n        const currentLevel = tournament.blindStructure[tournament.currentBlindLevel];\n        return `Läuft - Level ${tournament.currentBlindLevel + 1} (${currentLevel?.smallBlind}/${currentLevel?.bigBlind})`;\n      case 'completed':\n        return 'Beendet';\n      default:\n        return 'Unbekannt';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-900 via-green-800 to-emerald-900 p-8\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <div className=\"text-center flex-1\">\n            <h1 className=\"text-4xl font-bold text-white mb-2\">Tournament Lobby</h1>\n            <p className=\"text-green-200\">Tritt Bojek Poker Turnieren bei oder erstelle dein eigenes</p>\n          </div>\n          {onBackToLobby && (\n            <button\n              onClick={onBackToLobby}\n              className=\"bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg transition-colors\"\n            >\n              ← Zurück zur Lobby\n            </button>\n          )}\n        </div>\n\n        {/* Create Tournament Button */}\n        <div className=\"mb-8 text-center\">\n          <button\n            onClick={() => setShowCreateForm(!showCreateForm)}\n            className=\"bg-yellow-600 hover:bg-yellow-700 text-white font-bold py-3 px-8 rounded-lg transition-colors\"\n          >\n            {showCreateForm ? 'Abbrechen' : 'Neues Turnier erstellen'}\n          </button>\n        </div>\n\n        {/* Create Tournament Form */}\n        {showCreateForm && (\n          <div className=\"bg-black/30 backdrop-blur-sm rounded-lg p-6 mb-8 max-w-md mx-auto\">\n            <h3 className=\"text-xl font-bold text-white mb-4\">Neues Turnier</h3>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-green-200 mb-2\">Turniername</label>\n                <input\n                  type=\"text\"\n                  value={newTournament.name}\n                  onChange={(e) => setNewTournament(prev => ({ ...prev, name: e.target.value }))}\n                  className=\"w-full p-2 rounded bg-gray-800 text-white border border-gray-600\"\n                  placeholder=\"Mein Turnier\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-green-200 mb-2\">Buy-In ($)</label>\n                <input\n                  type=\"number\"\n                  value={newTournament.buyIn}\n                  onChange={(e) => setNewTournament(prev => ({ ...prev, buyIn: parseInt(e.target.value) }))}\n                  className=\"w-full p-2 rounded bg-gray-800 text-white border border-gray-600\"\n                  min=\"1\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-green-200 mb-2\">Max. Spieler</label>\n                <select\n                  value={newTournament.maxPlayers}\n                  onChange={(e) => setNewTournament(prev => ({ ...prev, maxPlayers: parseInt(e.target.value) }))}\n                  className=\"w-full p-2 rounded bg-gray-800 text-white border border-gray-600\"\n                >\n                  <option value={3}>3 Spieler</option>\n                  <option value={6}>6 Spieler</option>\n                  <option value={9}>9 Spieler</option>\n                </select>\n              </div>\n              <button\n                onClick={createTournament}\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition-colors\"\n              >\n                Turnier erstellen\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Tournaments List */}\n        <div className=\"grid gap-6\">\n          {tournaments.length === 0 ? (\n            <div className=\"text-center text-white/70 py-12\">\n              <p className=\"text-xl\">Keine aktiven Turniere</p>\n              <p>Erstelle das erste Turnier!</p>\n            </div>\n          ) : (\n            tournaments.map((tournament) => (\n              <div key={tournament.id} className=\"bg-black/30 backdrop-blur-sm rounded-lg p-6\">\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div>\n                    <h3 className=\"text-2xl font-bold text-white\">{tournament.name}</h3>\n                    <p className=\"text-green-200\">{getTournamentStatus(tournament)}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-yellow-400 font-bold text-xl\">${tournament.buyIn} Buy-In</p>\n                    <p className=\"text-green-300\">Preispool: ${tournament.prizePool}</p>\n                  </div>\n                </div>\n\n                {/* Tournament Info */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4 text-sm\">\n                  <div className=\"bg-white/10 rounded p-3\">\n                    <p className=\"text-green-200\">Spieler</p>\n                    <p className=\"text-white font-bold\">{tournament.currentPlayers}/{tournament.maxPlayers}</p>\n                  </div>\n                  <div className=\"bg-white/10 rounded p-3\">\n                    <p className=\"text-green-200\">Status</p>\n                    <p className=\"text-white font-bold\">{tournament.status}</p>\n                  </div>\n                  {tournament.status === 'active' && (\n                    <>\n                      <div className=\"bg-white/10 rounded p-3\">\n                        <p className=\"text-green-200\">Aktuelles Level</p>\n                        <p className=\"text-white font-bold\">{tournament.currentBlindLevel + 1}</p>\n                      </div>\n                      <div className=\"bg-white/10 rounded p-3\">\n                        <p className=\"text-green-200\">Blinds</p>\n                        <p className=\"text-white font-bold\">\n                          {tournament.blindStructure[tournament.currentBlindLevel]?.smallBlind}/\n                          {tournament.blindStructure[tournament.currentBlindLevel]?.bigBlind}\n                        </p>\n                      </div>\n                    </>\n                  )}\n                </div>\n\n                {/* Participants */}\n                <div className=\"mb-4\">\n                  <h4 className=\"text-white font-bold mb-2\">Teilnehmer:</h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {tournament.participants.map((participant, index) => (\n                      <span\n                        key={index}\n                        className={`px-3 py-1 rounded-full text-sm ${\n                          participant.isEliminated\n                            ? 'bg-red-600/30 text-red-200'\n                            : 'bg-green-600/30 text-green-200'\n                        }`}\n                      >\n                        {participant.username}\n                        {participant.isEliminated && ` (${participant.position}.)`}\n                        {!participant.isEliminated && ` (${participant.chipCount} Chips)`}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Actions */}\n                <div className=\"flex gap-3\">\n                  {tournament.status === 'waiting' && (\n                    <>\n                      {tournament.currentPlayers < tournament.maxPlayers && (\n                        <button\n                          onClick={() => joinTournament(tournament.id)}\n                          className=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded transition-colors\"\n                        >\n                          Beitreten\n                        </button>\n                      )}\n                      {tournament.currentPlayers >= 2 && (\n                        <button\n                          onClick={() => startTournament(tournament.id)}\n                          className=\"bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded transition-colors\"\n                        >\n                          Turnier starten\n                        </button>\n                      )}\n                    </>\n                  )}\n                  {tournament.status === 'active' && (\n                    <button\n                      onClick={() => joinTournament(tournament.id)}\n                      className=\"bg-yellow-600 hover:bg-yellow-700 text-white font-bold py-2 px-6 rounded transition-colors\"\n                    >\n                      Zuschauen\n                    </button>\n                  )}\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","size_bytes":12098},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2001},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4419},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1598},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1140},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-lg text-sm font-medium transition-all duration-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 transform active:scale-95\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-gradient-to-r from-primary via-primary to-primary/80 text-primary-foreground shadow-lg hover:shadow-primary/25 hover:shadow-xl hover:from-primary/90 hover:via-primary hover:to-primary border border-primary/30\",\n        destructive:\n          \"bg-gradient-to-r from-destructive via-destructive to-destructive/80 text-destructive-foreground shadow-lg hover:shadow-destructive/25 hover:shadow-xl hover:from-destructive/90 hover:via-destructive hover:to-destructive border border-destructive/30\",\n        outline:\n          \"border-2 border-primary/50 bg-background/80 text-primary shadow-md hover:bg-primary/20 hover:text-primary hover:border-primary backdrop-blur-sm hover:shadow-primary/20 hover:shadow-lg\",\n        secondary:\n          \"bg-gradient-to-r from-secondary via-secondary to-secondary/80 text-secondary-foreground shadow-lg hover:shadow-secondary/25 hover:shadow-xl hover:from-secondary/90 hover:via-secondary hover:to-secondary border border-secondary/30\",\n        ghost: \"hover:bg-accent/30 hover:text-accent-foreground backdrop-blur-sm hover:shadow-md transition-all\",\n        link: \"text-primary underline-offset-4 hover:underline hover:text-accent transition-colors\",\n        // 🎰 GAMING VARIANTS FOR BOJEK POKER 🎲\n        gaming:\n          \"bg-gradient-to-r from-accent via-accent to-accent/80 text-accent-foreground shadow-xl hover:shadow-accent/40 hover:shadow-2xl font-bold uppercase tracking-wide border border-accent/40\",\n        neon:\n          \"bg-gradient-to-r from-primary via-secondary to-primary text-white border-2 border-accent/60 shadow-xl hover:shadow-accent/60 hover:shadow-2xl font-bold backdrop-blur-sm\",\n      },\n      size: {\n        default: \"h-11 px-6 py-3 text-sm\",\n        sm: \"h-9 rounded-md px-4 text-xs\",\n        lg: \"h-14 rounded-lg px-10 text-base font-bold\",\n        xl: \"h-16 rounded-xl px-12 text-lg font-bold\",\n        icon: \"h-11 w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":3177},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2935},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1828},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1012},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4873},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7224},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3849},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7480},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4132},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1198},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px bg-foreground\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2109},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":768},"client/src/components/ui/interface.tsx":{"content":"import { useEffect } from \"react\";\nimport { useGame } from \"@/lib/stores/useGame\";\nimport { useAudio } from \"@/lib/stores/useAudio\";\nimport { Button } from \"./button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"./card\";\nimport { VolumeX, Volume2, RotateCw, Trophy } from \"lucide-react\";\n\nexport function Interface() {\n  const restart = useGame((state) => state.restart);\n  const phase = useGame((state) => state.phase);\n  const { isMuted, toggleMute } = useAudio();\n\n  // Handle clicks on the interface in the ready phase to start the game\n  useEffect(() => {\n    if (phase === \"ready\") {\n      const handleClick = () => {\n        const activeElement = document.activeElement;\n        if (activeElement && 'blur' in activeElement) {\n          (activeElement as HTMLElement).blur();\n        }\n        const event = new KeyboardEvent(\"keydown\", { code: \"Space\" });\n        window.dispatchEvent(event);\n      };\n\n      window.addEventListener(\"click\", handleClick);\n      return () => window.removeEventListener(\"click\", handleClick);\n    }\n  }, [phase]);\n\n  return (\n    <>\n      {/* Top-right corner UI controls */}\n      <div className=\"fixed top-4 right-4 flex gap-2 z-10\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleMute}\n          title={isMuted ? \"Unmute\" : \"Mute\"}\n        >\n          {isMuted ? <VolumeX size={18} /> : <Volume2 size={18} />}\n        </Button>\n        \n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={restart}\n          title=\"Restart Game\"\n        >\n          <RotateCw size={18} />\n        </Button>\n      </div>\n      \n      {/* Game completion overlay */}\n      {phase === \"ended\" && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-20 bg-black/30\">\n          <Card className=\"w-full max-w-md mx-4 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-center gap-2\">\n                <Trophy className=\"text-yellow-500\" />\n                Level Complete!\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent>\n              <p className=\"text-center text-muted-foreground\">\n                Congratulations! You successfully navigated the course.\n              </p>\n            </CardContent>\n            \n            <CardFooter className=\"flex justify-center\">\n              <Button onClick={restart} className=\"w-full\">\n                Play Again\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      )}\n      \n      {/* Instructions panel */}\n      <div className=\"fixed bottom-4 left-4 z-10\">\n        <Card className=\"w-auto max-w-xs bg-background/80 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium mb-2\">Controls:</h3>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>WASD or Arrow Keys: Move the ball</li>\n              <li>Space: Jump</li>\n              <li>R: Restart game</li>\n              <li>M: Toggle sound</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":3180},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8522},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5124},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1292},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":792},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1410},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5639},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4280},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-is-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","size_bytes":23790},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":252},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1037},"client/src/components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1148},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2859},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1877},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":649},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1486},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1217},"client/src/lib/stores/useAudio.tsx":{"content":"import { create } from \"zustand\";\n\ninterface AudioState {\n  backgroundMusic: HTMLAudioElement | null;\n  hitSound: HTMLAudioElement | null;\n  successSound: HTMLAudioElement | null;\n  isMuted: boolean;\n  \n  // Setter functions\n  setBackgroundMusic: (music: HTMLAudioElement) => void;\n  setHitSound: (sound: HTMLAudioElement) => void;\n  setSuccessSound: (sound: HTMLAudioElement) => void;\n  \n  // Control functions\n  toggleMute: () => void;\n  playHit: () => void;\n  playSuccess: () => void;\n}\n\nexport const useAudio = create<AudioState>((set, get) => ({\n  backgroundMusic: null,\n  hitSound: null,\n  successSound: null,\n  isMuted: true, // Start muted by default\n  \n  setBackgroundMusic: (music) => set({ backgroundMusic: music }),\n  setHitSound: (sound) => set({ hitSound: sound }),\n  setSuccessSound: (sound) => set({ successSound: sound }),\n  \n  toggleMute: () => {\n    const { isMuted } = get();\n    const newMutedState = !isMuted;\n    \n    // Just update the muted state\n    set({ isMuted: newMutedState });\n    \n    // Log the change\n    console.log(`Sound ${newMutedState ? 'muted' : 'unmuted'}`);\n  },\n  \n  playHit: () => {\n    const { hitSound, isMuted } = get();\n    if (hitSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Hit sound skipped (muted)\");\n        return;\n      }\n      \n      // Clone the sound to allow overlapping playback\n      const soundClone = hitSound.cloneNode() as HTMLAudioElement;\n      soundClone.volume = 0.3;\n      soundClone.play().catch(error => {\n        console.log(\"Hit sound play prevented:\", error);\n      });\n    }\n  },\n  \n  playSuccess: () => {\n    const { successSound, isMuted } = get();\n    if (successSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Success sound skipped (muted)\");\n        return;\n      }\n      \n      successSound.currentTime = 0;\n      successSound.play().catch(error => {\n        console.log(\"Success sound play prevented:\", error);\n      });\n    }\n  }\n}));\n","size_bytes":2025},"client/src/lib/stores/useAuth.tsx":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nexport interface AuthUser {\n  id: number;\n  username: string;\n  email?: string;\n  balance: string;\n  totalWinnings: string;\n  totalLosses: string;\n  handsPlayed: number;\n  handsWon: number;\n  gamesPlayed: number;\n  gamesWon: number;\n  createdAt: string;\n  updatedAt?: string;\n}\n\ninterface AuthState {\n  user: AuthUser | null;\n  token: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n\n  // Actions\n  login: (username: string, password: string) => Promise<void>;\n  register: (username: string, password: string, email?: string) => Promise<void>;\n  logout: () => void;\n  setUser: (user: AuthUser) => void;\n  setToken: (token: string) => void;\n  clearError: () => void;\n  fetchProfile: () => Promise<void>;\n}\n\nexport const useAuth = create<AuthState>()(\n  persist(\n    (set, get) => ({\n      user: null,\n      token: null,\n      isAuthenticated: false,\n      isLoading: false,\n      error: null,\n\n      login: async (username: string, password: string) => {\n        set({ isLoading: true, error: null });\n\n        try {\n          const response = await fetch('/api/auth/login', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ username, password }),\n          });\n\n          const data = await response.json();\n\n          if (!response.ok) {\n            throw new Error(data.message || 'Login failed');\n          }\n\n          set({\n            user: data.user,\n            token: data.token,\n            isAuthenticated: true,\n            isLoading: false,\n            error: null,\n          });\n        } catch (error) {\n          set({\n            isLoading: false,\n            error: error instanceof Error ? error.message : 'Login failed',\n          });\n          throw error;\n        }\n      },\n\n      register: async (username: string, password: string, email?: string) => {\n        set({ isLoading: true, error: null });\n\n        try {\n          const response = await fetch('/api/auth/register', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ username, password, email }),\n          });\n\n          const data = await response.json();\n\n          if (!response.ok) {\n            throw new Error(data.message || 'Registration failed');\n          }\n\n          set({\n            user: data.user,\n            token: data.token,\n            isAuthenticated: true,\n            isLoading: false,\n            error: null,\n          });\n        } catch (error) {\n          set({\n            isLoading: false,\n            error: error instanceof Error ? error.message : 'Registration failed',\n          });\n          throw error;\n        }\n      },\n\n      logout: () => {\n        set({\n          user: null,\n          token: null,\n          isAuthenticated: false,\n          error: null,\n        });\n      },\n\n      setUser: (user: AuthUser) => {\n        set({ user, isAuthenticated: true });\n      },\n\n      setToken: (token: string) => {\n        set({ token });\n      },\n\n      clearError: () => {\n        set({ error: null });\n      },\n\n      fetchProfile: async () => {\n        const { token } = get();\n        if (!token) return;\n\n        set({ isLoading: true });\n\n        try {\n          const response = await fetch('/api/auth/profile', {\n            headers: {\n              'Authorization': `Bearer ${token}`,\n            },\n          });\n\n          const data = await response.json();\n\n          if (!response.ok) {\n            throw new Error(data.message || 'Failed to fetch profile');\n          }\n\n          set({\n            user: data.user,\n            isAuthenticated: true,\n            isLoading: false,\n          });\n        } catch (error) {\n          console.error('Profile fetch error:', error);\n          // Token might be expired, logout\n          get().logout();\n          set({ isLoading: false });\n        }\n      },\n    }),\n    {\n      name: 'poker-auth', // unique name for localStorage\n      partialize: (state) => ({ \n        user: state.user, \n        token: state.token, \n        isAuthenticated: state.isAuthenticated \n      }),\n    }\n  )\n);","size_bytes":4299},"client/src/lib/stores/useGame.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport type GamePhase = \"ready\" | \"playing\" | \"ended\";\n\ninterface GameState {\n  phase: GamePhase;\n  \n  // Actions\n  start: () => void;\n  restart: () => void;\n  end: () => void;\n}\n\nexport const useGame = create<GameState>()(\n  subscribeWithSelector((set) => ({\n    phase: \"ready\",\n    \n    start: () => {\n      set((state) => {\n        // Only transition from ready to playing\n        if (state.phase === \"ready\") {\n          return { phase: \"playing\" };\n        }\n        return {};\n      });\n    },\n    \n    restart: () => {\n      set(() => ({ phase: \"ready\" }));\n    },\n    \n    end: () => {\n      set((state) => {\n        // Only transition from playing to ended\n        if (state.phase === \"playing\") {\n          return { phase: \"ended\" };\n        }\n        return {};\n      });\n    }\n  }))\n);\n","size_bytes":893},"client/src/lib/stores/usePoker.tsx":{"content":"import { create } from 'zustand';\nimport { subscribeWithSelector } from 'zustand/middleware';\nimport { Room, GameState, Player, Card } from '@shared/types';\n\ninterface PokerState {\n  // Connection state\n  isConnected: boolean;\n  \n  // Lobby state\n  rooms: Room[];\n  currentRoom: Room | null;\n  currentRoomId: string | null;\n  \n  // Game state\n  gameState: GameState | null;\n  players: Player[];\n  myCards: Card[];\n  myPlayerId: string | null;\n  \n  // UI state\n  selectedAction: 'fold' | 'call' | 'raise' | 'check' | 'bet' | 'all-in' | null;\n  raiseAmount: number;\n  showLobby: boolean;\n  \n  // Actions\n  setConnected: (connected: boolean) => void;\n  setRooms: (rooms: Room[]) => void;\n  setCurrentRoom: (room: Room | null) => void;\n  setCurrentRoomId: (roomId: string | null) => void;\n  setGameState: (gameState: GameState | null) => void;\n  setPlayers: (players: Player[]) => void;\n  setMyCards: (cards: Card[]) => void;\n  setMyPlayerId: (playerId: string | null) => void;\n  setSelectedAction: (action: 'fold' | 'call' | 'raise' | 'check' | 'bet' | 'all-in' | null) => void;\n  setRaiseAmount: (amount: number) => void;\n  setShowLobby: (show: boolean) => void;\n  \n  // Computed getters\n  getCurrentPlayer: () => Player | null;\n  getMyPlayer: () => Player | null;\n  isMyTurn: () => boolean;\n  canCheck: () => boolean;\n  canCall: () => boolean;\n  canRaise: () => boolean;\n  getCallAmount: () => number;\n  getMinRaise: () => number;\n  getMaxRaise: () => number;\n}\n\nexport const usePoker = create<PokerState>()(\n  subscribeWithSelector((set, get) => ({\n    // Initial state\n    isConnected: false,\n    rooms: [],\n    currentRoom: null,\n    currentRoomId: null,\n    gameState: null,\n    players: [],\n    myCards: [],\n    myPlayerId: null,\n    selectedAction: null,\n    raiseAmount: 0,\n    showLobby: true,\n    \n    // Actions\n    setConnected: (connected) => set({ isConnected: connected }),\n    setRooms: (rooms) => set({ rooms }),\n    setCurrentRoom: (room) => set({ currentRoom: room }),\n    setCurrentRoomId: (roomId) => set({ currentRoomId: roomId }),\n    setGameState: (gameState) => set({ gameState }),\n    setPlayers: (players) => set({ players }),\n    setMyCards: (cards) => set({ myCards: cards }),\n    setMyPlayerId: (playerId) => set({ myPlayerId: playerId }),\n    setSelectedAction: (action) => set({ selectedAction: action }),\n    setRaiseAmount: (amount) => set({ raiseAmount: amount }),\n    setShowLobby: (show) => set({ showLobby: show }),\n    \n    // Computed getters\n    getCurrentPlayer: () => {\n      const { gameState } = get();\n      if (!gameState || !gameState.isStarted) return null;\n      return gameState.players[gameState.currentPlayerIndex] || null;\n    },\n    \n    getMyPlayer: () => {\n      const { gameState, myPlayerId } = get();\n      if (!gameState || !myPlayerId) return null;\n      return gameState.players.find(p => p.id === myPlayerId) || null;\n    },\n    \n    isMyTurn: () => {\n      const { getCurrentPlayer, myPlayerId } = get();\n      const currentPlayer = getCurrentPlayer();\n      return currentPlayer?.id === myPlayerId;\n    },\n    \n    canCheck: () => {\n      const { getMyPlayer, gameState } = get();\n      const myPlayer = getMyPlayer();\n      if (!myPlayer || !gameState) return false;\n      return myPlayer.currentBet === gameState.currentBet;\n    },\n    \n    canCall: () => {\n      const { getMyPlayer, gameState } = get();\n      const myPlayer = getMyPlayer();\n      if (!myPlayer || !gameState) return false;\n      return myPlayer.currentBet < gameState.currentBet && myPlayer.chips > 0;\n    },\n    \n    canRaise: () => {\n      const { getMyPlayer } = get();\n      const myPlayer = getMyPlayer();\n      if (!myPlayer) return false;\n      return myPlayer.chips > 0;\n    },\n    \n    getCallAmount: () => {\n      const { getMyPlayer, gameState } = get();\n      const myPlayer = getMyPlayer();\n      if (!myPlayer || !gameState) return 0;\n      return Math.min(\n        gameState.currentBet - myPlayer.currentBet,\n        myPlayer.chips\n      );\n    },\n    \n    getMinRaise: () => {\n      const { gameState } = get();\n      if (!gameState) return 0;\n      return gameState.blinds.big;\n    },\n    \n    getMaxRaise: () => {\n      const { getMyPlayer } = get();\n      const myPlayer = getMyPlayer();\n      if (!myPlayer) return 0;\n      return myPlayer.chips;\n    }\n  }))\n);\n","size_bytes":4318},"replit.md":{"content":"# Overview\n\nThis is a full-stack Bojek Poker application built with React, Express, and Socket.IO. The application features real-time multiplayer poker games with 3D rendering capabilities, user authentication, game statistics tracking, and tournament support. Players can create or join poker rooms, play with realistic poker mechanics including blinds and betting rounds, and view comprehensive game statistics.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client uses React with TypeScript and a modern component-based architecture:\n- **Build System**: Vite with React plugin and custom configuration for 3D assets\n- **3D Rendering**: Three.js integration via @react-three/fiber for immersive poker table visualization\n- **UI Framework**: Radix UI primitives with Tailwind CSS for styling and shadcn/ui components\n- **State Management**: Custom Zustand stores for poker game state, authentication, and audio\n- **Real-time Communication**: Socket.IO client for live game updates\n\n## Backend Architecture\nThe server implements a REST API with WebSocket support:\n- **Framework**: Express.js with TypeScript\n- **Real-time Engine**: Socket.IO for live poker game mechanics and room management\n- **Game Logic**: Custom poker engine with hand evaluation, betting rounds, and tournament support\n- **Authentication**: JWT-based auth with bcrypt password hashing\n- **Development Setup**: Custom Vite integration for full-stack development\n\n## Data Layer\n**Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Design**: Comprehensive tables for users, game history, hand history, transactions, and tournaments\n- **Connection**: Neon serverless PostgreSQL integration\n- **Migrations**: Drizzle Kit for schema management\n\n## Game Engine Components\n**Core Systems**:\n- **PokerGame Class**: Handles deck management, player actions, betting rounds, and game phases\n- **HandEvaluator**: Bojek Poker hand ranking and comparison logic\n- **GameStatsTracker**: Persistent tracking of player performance and game analytics\n- **TournamentEngine**: Multi-table tournament management with blind progression\n\n**Socket Handlers**: Real-time event management for player actions, room updates, and game state synchronization\n\n## External Dependencies\n\n**Database & Infrastructure**:\n- Neon Database: Serverless PostgreSQL hosting\n- Drizzle ORM: Type-safe database toolkit\n\n**Authentication & Security**:\n- JWT: Token-based authentication\n- bcryptjs: Password hashing and verification\n\n**Real-time Communication**:\n- Socket.IO: WebSocket-based real-time communication\n\n**Frontend Libraries**:\n- Three.js ecosystem: 3D rendering and animation\n- Radix UI: Accessible component primitives\n- Tailwind CSS: Utility-first styling framework\n- TanStack Query: Server state management\n\n**Development Tools**:\n- Vite: Fast build tool and dev server\n- TypeScript: Type safety across the stack\n- ESBuild: Fast JavaScript bundling for production","size_bytes":3024},"server/poker/botPlayer.ts":{"content":"import { Player, GameState, PokerAction, Card } from '../../shared/types.js';\n\nexport interface BotPersonality {\n  name: string;\n  aggression: number; // 0-1, how likely to bet/raise vs call\n  tightness: number; // 0-1, how selective with starting hands  \n  bluffFrequency: number; // 0-1, how often to bluff\n}\n\nexport const BOT_PERSONALITIES: BotPersonality[] = [\n  {\n    name: \"Conservative Carl\",\n    aggression: 0.2,\n    tightness: 0.8,\n    bluffFrequency: 0.1\n  },\n  {\n    name: \"Steady Sam\", \n    aggression: 0.4,\n    tightness: 0.6,\n    bluffFrequency: 0.2\n  },\n  {\n    name: \"Aggressive Annie\",\n    aggression: 0.7,\n    tightness: 0.3,\n    bluffFrequency: 0.4\n  },\n  {\n    name: \"Loose Larry\",\n    aggression: 0.5,\n    tightness: 0.2,\n    bluffFrequency: 0.3\n  }\n];\n\nexport class BotPlayer {\n  public id: string;\n  public name: string;\n  public personality: BotPersonality;\n  public isBot: boolean = true;\n\n  constructor(botId: string, personality?: BotPersonality) {\n    this.id = `bot_${botId}`;\n    this.personality = personality || BOT_PERSONALITIES[Math.floor(Math.random() * BOT_PERSONALITIES.length)];\n    this.name = this.personality.name;\n  }\n\n  /**\n   * Create a Player object for this bot\n   */\n  public createPlayerObject(chips: number, position: number): Player {\n    return {\n      id: this.id,\n      userId: undefined, // Bots don't have user IDs\n      name: this.name,\n      chips,\n      cards: [],\n      currentBet: 0,\n      totalBet: 0,\n      position,\n      isActive: true,\n      isFolded: false,\n      isAllIn: false\n    };\n  }\n\n  /**\n   * Simple hand strength evaluation (0-1)\n   * This is a very basic implementation for MVP\n   */\n  private evaluateHandStrength(holeCards: Card[], communityCards: Card[]): number {\n    if (holeCards.length !== 2) return 0;\n\n    const card1Value = this.getCardValue(holeCards[0].rank);\n    const card2Value = this.getCardValue(holeCards[1].rank);\n    const isPair = card1Value === card2Value;\n    const isSuited = holeCards[0].suit === holeCards[1].suit;\n    const highCard = Math.max(card1Value, card2Value);\n    const lowCard = Math.min(card1Value, card2Value);\n\n    let strength = 0;\n\n    // Pre-flop hand strength\n    if (isPair) {\n      strength = 0.5 + (highCard / 14) * 0.4; // Pairs are strong\n    } else if (isSuited) {\n      strength = 0.2 + (highCard + lowCard) / 28 * 0.3; // Suited cards bonus\n    } else {\n      strength = (highCard + lowCard) / 28 * 0.4; // High cards\n    }\n\n    // Adjust for community cards (very simple)\n    if (communityCards.length > 0) {\n      // Check for potential pairs, flushes, straights (simplified)\n      const allCards = [...holeCards, ...communityCards];\n      const ranks = allCards.map(c => this.getCardValue(c.rank));\n      const suits = allCards.map(c => c.suit);\n      \n      // Look for pairs\n      const rankCounts: { [key: number]: number } = {};\n      ranks.forEach(rank => {\n        rankCounts[rank] = (rankCounts[rank] || 0) + 1;\n      });\n      \n      const maxCount = Math.max(...Object.values(rankCounts));\n      if (maxCount >= 2) strength += 0.2; // Has a pair or better\n      if (maxCount >= 3) strength += 0.3; // Has three of a kind or better\n\n      // Look for flush draws\n      const suitCounts: { [key: string]: number } = {};\n      suits.forEach(suit => {\n        suitCounts[suit] = (suitCounts[suit] || 0) + 1;\n      });\n      const maxSuitCount = Math.max(...Object.values(suitCounts));\n      if (maxSuitCount >= 4) strength += 0.1; // Flush draw\n    }\n\n    return Math.min(strength, 1);\n  }\n\n  private getCardValue(rank: string): number {\n    const values: { [key: string]: number } = {\n      'A': 14, 'K': 13, 'Q': 12, 'J': 11, '10': 10,\n      '9': 9, '8': 8, '7': 7, '6': 6, '5': 5, '4': 4, '3': 3, '2': 2\n    };\n    return values[rank] || 0;\n  }\n\n  /**\n   * Make a decision based on current game state\n   */\n  public makeDecision(gameState: GameState, playerId: string): PokerAction {\n    const player = gameState.players.find(p => p.id === playerId);\n    if (!player) {\n      return { type: 'fold', playerId };\n    }\n\n    const handStrength = this.evaluateHandStrength(player.cards, gameState.communityCards);\n    const potOdds = gameState.pot > 0 ? (gameState.currentBet - player.currentBet) / (gameState.pot + gameState.currentBet - player.currentBet) : 0;\n    \n    // Adjust hand strength based on personality\n    let adjustedStrength = handStrength;\n    adjustedStrength *= (1 + this.personality.aggression * 0.2); // Aggressive bots value hands higher\n    adjustedStrength *= (1 + (1 - this.personality.tightness) * 0.1); // Loose bots value hands higher\n\n    const needToCall = gameState.currentBet - player.currentBet;\n    const canCheck = needToCall === 0;\n\n    // Very simple decision tree for MVP\n    if (adjustedStrength < 0.2) {\n      // Weak hand - usually fold\n      if (canCheck) {\n        return { type: 'check', playerId };\n      } else {\n        return { type: 'fold', playerId };\n      }\n    } else if (adjustedStrength < 0.5) {\n      // Mediocre hand - call or check\n      if (canCheck) {\n        return { type: 'check', playerId };\n      } else if (needToCall <= player.chips * 0.1) { // Only call small bets\n        return { type: 'call', playerId };\n      } else {\n        return { type: 'fold', playerId };\n      }\n    } else if (adjustedStrength < 0.8) {\n      // Good hand - call or small bet\n      if (canCheck && Math.random() < this.personality.aggression) {\n        // Sometimes bet with good hands\n        const betAmount = Math.floor(gameState.pot * 0.5 + Math.random() * gameState.pot * 0.3);\n        return { type: 'bet', playerId, amount: Math.min(betAmount, player.chips) };\n      } else if (canCheck) {\n        return { type: 'check', playerId };\n      } else {\n        return { type: 'call', playerId };\n      }\n    } else {\n      // Strong hand - bet or raise\n      if (canCheck) {\n        const betAmount = Math.floor(gameState.pot * 0.7 + Math.random() * gameState.pot * 0.5);\n        return { type: 'bet', playerId, amount: Math.min(betAmount, player.chips) };\n      } else if (Math.random() < this.personality.aggression) {\n        const raiseAmount = needToCall + Math.floor(gameState.pot * 0.5);\n        return { type: 'raise', playerId, amount: Math.min(raiseAmount, player.chips) };\n      } else {\n        return { type: 'call', playerId };\n      }\n    }\n  }\n\n  /**\n   * Create multiple bot players for a game\n   */\n  public static createBots(count: number, startingChips: number): BotPlayer[] {\n    const bots: BotPlayer[] = [];\n    const usedPersonalities = new Set<number>();\n\n    for (let i = 0; i < count; i++) {\n      let personalityIndex;\n      do {\n        personalityIndex = Math.floor(Math.random() * BOT_PERSONALITIES.length);\n      } while (usedPersonalities.has(personalityIndex) && usedPersonalities.size < BOT_PERSONALITIES.length);\n      \n      usedPersonalities.add(personalityIndex);\n      const personality = BOT_PERSONALITIES[personalityIndex];\n      bots.push(new BotPlayer(`${i + 1}`, personality));\n    }\n\n    return bots;\n  }\n}","size_bytes":7038},"client/src/components/ui/LanguageSwitcher.tsx":{"content":"import { useLanguage } from '@/lib/stores/useLanguage';\nimport { Button } from './button';\nimport { Language } from '@/lib/i18n';\n\nexport function LanguageSwitcher() {\n  const { currentLanguage, setLanguage, t } = useLanguage();\n\n  const handleLanguageChange = (language: Language) => {\n    setLanguage(language);\n  };\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <Button\n        variant={currentLanguage === 'de' ? 'default' : 'ghost'}\n        size=\"sm\"\n        onClick={() => handleLanguageChange('de')}\n        className=\"min-w-[60px]\"\n      >\n        🇩🇪 DE\n      </Button>\n      <Button\n        variant={currentLanguage === 'en' ? 'default' : 'ghost'}\n        size=\"sm\"\n        onClick={() => handleLanguageChange('en')}\n        className=\"min-w-[60px]\"\n      >\n        🇬🇧 EN\n      </Button>\n    </div>\n  );\n}","size_bytes":844},"client/src/lib/i18n.ts":{"content":"// Simple i18n system for Bogec Poker\nexport type Language = 'en' | 'de';\n\nexport interface Translations {\n  // App branding\n  appName: string;\n  appSubtitle: string;\n  \n  // Auth & User\n  login: string;\n  register: string;\n  username: string;\n  password: string;\n  email: string;\n  confirmPassword: string;\n  loginButton: string;\n  registerButton: string;\n  logging: string;\n  creatingAccount: string;\n  cancel: string;\n  currentBalance: string;\n  \n  // Lobby & Rooms\n  rooms: string;\n  createRoom: string;\n  joinRoom: string;\n  roomName: string;\n  maxPlayers: string;\n  smallBlind: string;\n  bigBlind: string;\n  buyIn: string;\n  playerName: string;\n  privateRoom: string;\n  roomPassword: string;\n  noRoomsAvailable: string;\n  againstComputer: string;\n  againstComputerDesc: string;\n  createGame: string;\n  refresh: string;\n  full: string;\n  join: string;\n  availableRooms: string;\n  players: string;\n  createRoomSubtitle: string;\n  connectingToServer: string;\n  singlePlayerRoomName: string;\n  creating: string;\n  startGame: string;\n  \n  // Error messages\n  playerNameAndRoomNameRequired: string;\n  playerNameRequired: string;\n  \n  // Game UI\n  texasHoldem: string;\n  waitingForGame: string;\n  waitingForTurn: string;\n  playerTurn: string;\n  round: string;\n  currentBet: string;\n  phase: string;\n  pot: string;\n  roundComplete: string;\n  winnerByDefault: string;\n  \n  // Game Actions\n  fold: string;\n  check: string;\n  call: string;\n  bet: string;\n  raise: string;\n  allIn: string;\n  confirm: string;\n  \n  // Hand Rankings\n  royalFlush: string;\n  straightFlush: string;\n  fourOfAKind: string;\n  fullHouse: string;\n  flush: string;\n  straight: string;\n  threeOfAKind: string;\n  twoPair: string;\n  pair: string;\n  highCard: string;\n  \n  // Navigation\n  leaveRoom: string;\n  backToLobby: string;\n  settings: string;\n  help: string;\n  about: string;\n  \n  // Statistics\n  handsPlayed: string;\n  handWinRate: string;\n  gamesPlayed: string;\n  gameWinRate: string;\n  totalWinnings: string;\n  totalLosses: string;\n  netProfit: string;\n  memberSince: string;\n  \n  // Tournament\n  tournament: string;\n  tournamentName: string;\n  tournaments: string;\n  enterTournament: string;\n  startTournament: string;\n  participants: string;\n  currentLevel: string;\n  blinds: string;\n  status: string;\n  tournamentMode: string;\n  tournamentDescription: string;\n  enterTournamentLobby: string;\n  \n  // Language\n  language: string;\n  english: string;\n  german: string;\n\n  // Ironic Events\n  ironicEventTriggered: string;\n  rouletteSpun: string;\n  eventTitle: string;\n  eventDescription: string;\n}\n\nconst englishTranslations: Translations = {\n  // App branding\n  appName: 'Bojek Poker',\n  appSubtitle: 'The Most Unpredictable Poker Experience',\n  \n  // Auth & User\n  login: 'Login',\n  register: 'Register',\n  username: 'Username',\n  password: 'Password',\n  email: 'Email (optional)',\n  confirmPassword: 'Confirm Password',\n  loginButton: 'Login',\n  registerButton: 'Register',\n  logging: 'Logging in...',\n  creatingAccount: 'Creating Account...',\n  cancel: 'Cancel',\n  currentBalance: 'Current Balance',\n  \n  // Lobby & Rooms\n  rooms: 'Rooms',\n  createRoom: 'Create Room',\n  joinRoom: 'Join Room',\n  roomName: 'Room Name',\n  maxPlayers: 'Max Players (3-6)',\n  smallBlind: 'Small Blind ($)',\n  bigBlind: 'Big Blind ($)',\n  buyIn: 'Buy-in ($)',\n  playerName: 'Your Name',\n  privateRoom: 'Private Room',\n  roomPassword: 'Room Password',\n  noRoomsAvailable: 'No rooms available. Create one to get started!',\n  againstComputer: 'Against Computer',\n  againstComputerDesc: 'Play against AI opponents with different difficulty levels. Perfect for practice and learning!',\n  createGame: 'Create Game...',\n  refresh: 'Refresh',\n  full: 'Full',\n  join: 'Join',\n  availableRooms: 'Available Rooms',\n  players: 'Players',\n  createRoomSubtitle: 'Join or create a poker room to start playing',\n  connectingToServer: 'Connecting to server...',\n  singlePlayerRoomName: '{playerName}\\'s Game vs Computer',\n  creating: 'Creating...',\n  startGame: 'Start Game',\n  \n  // Error messages\n  playerNameAndRoomNameRequired: 'Please enter both player name and room name',\n  playerNameRequired: 'Please enter your player name',\n  \n  // Game UI\n  texasHoldem: 'BOJEK HOLD\\'EM',\n  waitingForGame: 'Waiting for game to start...',\n  waitingForTurn: 'Waiting for your turn...',\n  playerTurn: '{playerName}\\'s turn',\n  round: 'Round',\n  currentBet: 'Current bet',\n  phase: 'Phase',\n  pot: 'Pot',\n  roundComplete: 'Round Complete!',\n  winnerByDefault: 'Winner by default',\n  \n  // Game Actions\n  fold: 'Fold',\n  check: 'Check',\n  call: 'Call',\n  bet: 'Bet',\n  raise: 'Raise',\n  allIn: 'All-in',\n  confirm: 'Confirm',\n  \n  // Hand Rankings\n  royalFlush: 'Royal Flush',\n  straightFlush: 'Straight Flush',\n  fourOfAKind: 'Four of a Kind',\n  fullHouse: 'Full House',\n  flush: 'Flush',\n  straight: 'Straight',\n  threeOfAKind: 'Three of a Kind',\n  twoPair: 'Two Pair',\n  pair: 'Pair',\n  highCard: 'High Card',\n  \n  // Navigation\n  leaveRoom: 'Leave Room',\n  backToLobby: 'Back to Lobby',\n  settings: 'Settings',\n  help: 'Help',\n  about: 'About',\n  \n  // Statistics\n  handsPlayed: 'Hands Played',\n  handWinRate: 'Hand Win Rate',\n  gamesPlayed: 'Games Played',\n  gameWinRate: 'Game Win Rate',\n  totalWinnings: 'Total Winnings',\n  totalLosses: 'Total Losses',\n  netProfit: 'Net Profit',\n  memberSince: 'Member since',\n  \n  // Tournament\n  tournament: 'Tournament',\n  tournamentName: 'Tournament Name',\n  tournaments: 'Tournaments',\n  enterTournament: 'Enter Tournament',\n  startTournament: 'Start Tournament',\n  participants: 'Participants',\n  currentLevel: 'Current Level',\n  blinds: 'Blinds',\n  status: 'Status',\n  tournamentMode: 'Tournament Mode',\n  tournamentDescription: 'Participate in Bojek Hold\\'em tournaments with elimination and prize pools',\n  enterTournamentLobby: 'Enter Tournament Lobby',\n  \n  // Language\n  language: 'Language',\n  english: 'English',\n  german: 'German',\n\n  // Ironic Events\n  ironicEventTriggered: 'Ironic Event Triggered!',\n  rouletteSpun: 'Roulette Number',\n  eventTitle: 'Bojek Poker Event',\n  eventDescription: 'Something unexpected happened!',\n};\n\nconst germanTranslations: Translations = {\n  // App branding\n  appName: 'Bojek Poker',\n  appSubtitle: 'Das Unberechenbarste Poker-Erlebnis',\n  \n  // Auth & User\n  login: 'Anmelden',\n  register: 'Registrieren',\n  username: 'Benutzername',\n  password: 'Passwort',\n  email: 'E-Mail (optional)',\n  confirmPassword: 'Passwort bestätigen',\n  loginButton: 'Anmelden',\n  registerButton: 'Registrieren',\n  logging: 'Melde an...',\n  creatingAccount: 'Konto wird erstellt...',\n  cancel: 'Abbrechen',\n  currentBalance: 'Aktueller Kontostand',\n  \n  // Lobby & Rooms\n  rooms: 'Räume',\n  createRoom: 'Raum erstellen',\n  joinRoom: 'Raum beitreten',\n  roomName: 'Raumname',\n  maxPlayers: 'Max. Spieler (3-6)',\n  smallBlind: 'Small Blind ($)',\n  bigBlind: 'Big Blind ($)',\n  buyIn: 'Einsatz ($)',\n  playerName: 'Dein Name',\n  privateRoom: 'Privater Raum',\n  roomPassword: 'Raum-Passwort',\n  noRoomsAvailable: 'Keine Räume verfügbar. Erstelle einen neuen!',\n  againstComputer: 'Gegen Computer',\n  againstComputerDesc: 'Spiele gegen KI-Gegner mit verschiedenen Schwierigkeitsgraden. Perfekt zum Üben und Lernen!',\n  createGame: 'Spiel erstellen...',\n  refresh: 'Aktualisieren',\n  full: 'Voll',\n  join: 'Beitreten',\n  availableRooms: 'Verfügbare Räume',\n  players: 'Spieler',\n  createRoomSubtitle: 'Erstelle oder trete einem Raum bei um zu spielen',\n  connectingToServer: 'Verbinde zum Server...',\n  singlePlayerRoomName: '{playerName}s Spiel gegen Computer',\n  creating: 'Erstelle...',\n  startGame: 'Spiel starten',\n  \n  // Error messages\n  playerNameAndRoomNameRequired: 'Bitte gebe Spielername und Raumname ein',\n  playerNameRequired: 'Bitte gebe deinen Spielername ein',\n  \n  // Game UI\n  texasHoldem: 'BOJEK HOLD\\'EM',\n  waitingForGame: 'Warte auf Spielbeginn...',\n  waitingForTurn: 'Warte auf deinen Zug...',\n  playerTurn: '{playerName} ist dran',\n  round: 'Runde',\n  currentBet: 'Aktueller Einsatz',\n  phase: 'Phase',\n  pot: 'Pot',\n  roundComplete: 'Runde abgeschlossen!',\n  winnerByDefault: 'Gewinner durch Standard',\n  \n  // Game Actions\n  fold: 'Passen',\n  check: 'Schieben',\n  call: 'Mitgehen',\n  bet: 'Setzen',\n  raise: 'Erhöhen',\n  allIn: 'All-In',\n  confirm: 'Bestätigen',\n  \n  // Hand Rankings\n  royalFlush: 'Royal Flush',\n  straightFlush: 'Straight Flush',\n  fourOfAKind: 'Vier Gleiche',\n  fullHouse: 'Full House',\n  flush: 'Flush',\n  straight: 'Straße',\n  threeOfAKind: 'Drilling',\n  twoPair: 'Zwei Paare',\n  pair: 'Ein Paar',\n  highCard: 'Hohe Karte',\n  \n  // Navigation\n  leaveRoom: 'Raum verlassen',\n  backToLobby: 'Zurück zur Lobby',\n  settings: 'Einstellungen',\n  help: 'Hilfe',\n  about: 'Über',\n  \n  // Statistics\n  handsPlayed: 'Gespielte Hände',\n  handWinRate: 'Hand-Gewinnrate',\n  gamesPlayed: 'Gespielte Spiele',\n  gameWinRate: 'Spiel-Gewinnrate',\n  totalWinnings: 'Gesamtgewinne',\n  totalLosses: 'Gesamtverluste',\n  netProfit: 'Nettogewinn',\n  memberSince: 'Mitglied seit',\n  \n  // Tournament\n  tournament: 'Turnier',\n  tournamentName: 'Turniername',\n  tournaments: 'Turniere',\n  enterTournament: 'Turnier beitreten',\n  startTournament: 'Turnier starten',\n  participants: 'Teilnehmer',\n  currentLevel: 'Aktuelles Level',\n  blinds: 'Blinds',\n  status: 'Status',\n  tournamentMode: 'Turnier Modus',\n  tournamentDescription: 'Nimm an Bojek Hold\\'em Turnieren mit Ausscheidung und Preispools teil',\n  enterTournamentLobby: 'Turnier Lobby betreten',\n  \n  // Language\n  language: 'Sprache',\n  english: 'Englisch',\n  german: 'Deutsch',\n\n  // Ironic Events\n  ironicEventTriggered: 'Ironisches Event ausgelöst!',\n  rouletteSpun: 'Roulette Zahl',\n  eventTitle: 'Bojek Poker Event',\n  eventDescription: 'Etwas Unerwartetes ist passiert!',\n};\n\nexport const translations = {\n  en: englishTranslations,\n  de: germanTranslations,\n};\n\n// Get translation helper function\nexport function getTranslation(language: Language, key: keyof Translations): string {\n  return translations[language][key];\n}\n\n// Template string helper\nexport function translateTemplate(language: Language, key: keyof Translations, values: Record<string, string> = {}): string {\n  let text = getTranslation(language, key);\n  \n  Object.entries(values).forEach(([placeholder, value]) => {\n    text = text.replace(`{${placeholder}}`, value);\n  });\n  \n  return text;\n}","size_bytes":10355},"client/src/lib/stores/useLanguage.tsx":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { Language, getTranslation, translateTemplate, Translations } from '../i18n';\n\ninterface LanguageState {\n  currentLanguage: Language;\n  setLanguage: (language: Language) => void;\n  t: (key: keyof Translations, values?: Record<string, string>) => string;\n}\n\nexport const useLanguage = create<LanguageState>()(\n  persist(\n    (set, get) => ({\n      currentLanguage: 'de', // Default to German for Bogec Poker\n      \n      setLanguage: (language: Language) => {\n        set({ currentLanguage: language });\n      },\n      \n      t: (key: keyof Translations, values?: Record<string, string>) => {\n        const { currentLanguage } = get();\n        if (values) {\n          return translateTemplate(currentLanguage, key, values);\n        }\n        return getTranslation(currentLanguage, key);\n      },\n    }),\n    {\n      name: 'bojek-poker-language',\n      partialize: (state) => ({ currentLanguage: state.currentLanguage }),\n    }\n  )\n);","size_bytes":1019},"server/poker/ironicEvents.ts":{"content":"import { GameState, Player } from '@shared/types';\nimport { HandEvaluator } from './handEvaluator';\n\nexport interface IronicEvent {\n  id: string;\n  name: string;\n  nameDE: string;\n  description: string;\n  descriptionDE: string;\n  probability: number;\n  effect: (gameState: GameState) => IronicEventResult;\n}\n\nexport interface IronicEventResult {\n  success: boolean;\n  message: string;\n  messageDE: string;\n  affectedPlayers?: string[];\n  chipChanges?: { [playerId: string]: number };\n  specialEffect?: string;\n}\n\nexport class IronicEventEngine {\n  private static readonly EVENTS: IronicEvent[] = [\n    {\n      id: 'money_rain',\n      name: '💰 Money Rain!',\n      nameDE: '💰 Geldregen!',\n      description: 'Everyone gets free chips from the sky!',\n      descriptionDE: 'Alle bekommen kostenlose Chips vom Himmel!',\n      probability: 0.15,\n      effect: (gameState: GameState): IronicEventResult => {\n        const chipChanges: { [key: string]: number } = {};\n        const bonusAmount = Math.floor(Math.random() * 200) + 100; // 100-300 chips\n        \n        gameState.players.forEach(player => {\n          if (player.isActive && !player.isFolded) {\n            player.chips += bonusAmount;\n            chipChanges[player.id] = bonusAmount;\n          }\n        });\n\n        return {\n          success: true,\n          message: `💰 Money Rain! Everyone received ${bonusAmount} chips!`,\n          messageDE: `💰 Geldregen! Jeder erhielt ${bonusAmount} Chips!`,\n          affectedPlayers: gameState.players.filter(p => p.isActive && !p.isFolded).map(p => p.id),\n          chipChanges,\n          specialEffect: 'money_rain'\n        };\n      }\n    },\n    {\n      id: 'robin_hood',\n      name: '🏹 Robin Hood Justice!',\n      nameDE: '🏹 Robin Hood Gerechtigkeit!',\n      description: 'The richest player must share with the poorest!',\n      descriptionDE: 'Der reichste Spieler muss mit dem ärmsten teilen!',\n      probability: 0.12,\n      effect: (gameState: GameState): IronicEventResult => {\n        const activePlayers = gameState.players.filter(p => p.isActive && !p.isFolded);\n        if (activePlayers.length < 2) return { success: false, message: 'Not enough players', messageDE: 'Nicht genug Spieler' };\n\n        const richest = activePlayers.reduce((a, b) => a.chips > b.chips ? a : b);\n        const poorest = activePlayers.reduce((a, b) => a.chips < b.chips ? a : b);\n        \n        if (richest.id === poorest.id) return { success: false, message: 'Same player', messageDE: 'Gleicher Spieler' };\n\n        const transferAmount = Math.floor(richest.chips * 0.25); // 25% of richest player's chips\n        richest.chips -= transferAmount;\n        poorest.chips += transferAmount;\n\n        return {\n          success: true,\n          message: `🏹 Robin Hood strikes! ${richest.name} gave ${transferAmount} chips to ${poorest.name}!`,\n          messageDE: `🏹 Robin Hood schlägt zu! ${richest.name} gab ${transferAmount} Chips an ${poorest.name}!`,\n          affectedPlayers: [richest.id, poorest.id],\n          chipChanges: { [richest.id]: -transferAmount, [poorest.id]: transferAmount },\n          specialEffect: 'robin_hood'\n        };\n      }\n    },\n    {\n      id: 'reverse_world',\n      name: '🔄 Reverse World!',\n      nameDE: '🔄 Umgekehrte Welt!',\n      description: 'For this hand, the WORST hand wins!',\n      descriptionDE: 'Für diese Hand gewinnt die SCHLECHTESTE Hand!',\n      probability: 0.08,\n      effect: (gameState: GameState): IronicEventResult => {\n        return {\n          success: true,\n          message: '🔄 Reverse World activated! The WORST hand will win this round!',\n          messageDE: '🔄 Umgekehrte Welt aktiviert! Die SCHLECHTESTE Hand gewinnt diese Runde!',\n          affectedPlayers: gameState.players.filter(p => p.isActive && !p.isFolded).map(p => p.id),\n          specialEffect: 'reverse_world'\n        };\n      }\n    },\n    {\n      id: 'inflation_crisis',\n      name: '📈 Inflation Crisis!',\n      nameDE: '📈 Inflation Krise!',\n      description: 'All blinds and bets are doubled for the next hand!',\n      descriptionDE: 'Alle Blinds und Einsätze werden für die nächste Hand verdoppelt!',\n      probability: 0.10,\n      effect: (gameState: GameState): IronicEventResult => {\n        gameState.blinds.small *= 2;\n        gameState.blinds.big *= 2;\n\n        return {\n          success: true,\n          message: `📈 Inflation Crisis! Blinds doubled to ${gameState.blinds.small}/${gameState.blinds.big}!`,\n          messageDE: `📈 Inflation Krise! Blinds verdoppelt auf ${gameState.blinds.small}/${gameState.blinds.big}!`,\n          affectedPlayers: gameState.players.filter(p => p.isActive).map(p => p.id),\n          specialEffect: 'inflation'\n        };\n      }\n    },\n    {\n      id: 'market_crash',\n      name: '📉 Market Crash!',\n      nameDE: '📉 Börsencrash!',\n      description: 'Everyone loses 20% of their chips!',\n      descriptionDE: 'Jeder verliert 20% seiner Chips!',\n      probability: 0.09,\n      effect: (gameState: GameState): IronicEventResult => {\n        const chipChanges: { [key: string]: number } = {};\n        \n        gameState.players.forEach(player => {\n          if (player.isActive && player.chips > 0) {\n            const lossAmount = Math.floor(player.chips * 0.2);\n            player.chips -= lossAmount;\n            chipChanges[player.id] = -lossAmount;\n          }\n        });\n\n        return {\n          success: true,\n          message: '📉 Market Crash! Everyone lost 20% of their chips!',\n          messageDE: '📉 Börsencrash! Jeder verlor 20% seiner Chips!',\n          affectedPlayers: gameState.players.filter(p => p.isActive).map(p => p.id),\n          chipChanges,\n          specialEffect: 'crash'\n        };\n      }\n    },\n    {\n      id: 'lucky_jackpot',\n      name: '🎰 Lucky Jackpot!',\n      nameDE: '🎰 Glücks-Jackpot!',\n      description: 'One random player wins a massive bonus!',\n      descriptionDE: 'Ein zufälliger Spieler gewinnt einen riesigen Bonus!',\n      probability: 0.07,\n      effect: (gameState: GameState): IronicEventResult => {\n        const activePlayers = gameState.players.filter(p => p.isActive && !p.isFolded);\n        if (activePlayers.length === 0) return { success: false, message: 'No active players', messageDE: 'Keine aktiven Spieler' };\n\n        const luckyPlayer = activePlayers[Math.floor(Math.random() * activePlayers.length)];\n        const bonusAmount = Math.floor(Math.random() * 500) + 300; // 300-800 chips\n        luckyPlayer.chips += bonusAmount;\n\n        return {\n          success: true,\n          message: `🎰 Lucky Jackpot! ${luckyPlayer.name} won ${bonusAmount} bonus chips!`,\n          messageDE: `🎰 Glücks-Jackpot! ${luckyPlayer.name} gewann ${bonusAmount} Bonus-Chips!`,\n          affectedPlayers: [luckyPlayer.id],\n          chipChanges: { [luckyPlayer.id]: bonusAmount },\n          specialEffect: 'jackpot'\n        };\n      }\n    },\n    {\n      id: 'card_shuffle_chaos',\n      name: '🃏 Card Shuffle Chaos!',\n      nameDE: '🃏 Karten-Misch-Chaos!',\n      description: 'All players randomly exchange one card!',\n      descriptionDE: 'Alle Spieler tauschen zufällig eine Karte!',\n      probability: 0.06,\n      effect: (gameState: GameState): IronicEventResult => {\n        const activePlayers = gameState.players.filter(p => p.isActive && !p.isFolded && p.cards.length > 0);\n        if (activePlayers.length < 2) return { success: false, message: 'Not enough players with cards', messageDE: 'Nicht genug Spieler mit Karten' };\n\n        // Randomly shuffle one card between all players\n        const playersCards = activePlayers.map(p => ({ playerId: p.id, card: p.cards[Math.floor(Math.random() * p.cards.length)] }));\n        \n        // Simple shuffle - everyone gets the next player's card\n        for (let i = 0; i < playersCards.length; i++) {\n          const currentPlayer = activePlayers.find(p => p.id === playersCards[i].playerId);\n          const nextCard = playersCards[(i + 1) % playersCards.length].card;\n          \n          if (currentPlayer) {\n            // Remove the old card and add the new one\n            const cardIndex = currentPlayer.cards.findIndex(c => c.id === playersCards[i].card.id);\n            if (cardIndex >= 0) {\n              currentPlayer.cards[cardIndex] = nextCard;\n            }\n          }\n        }\n\n        return {\n          success: true,\n          message: '🃏 Card Shuffle Chaos! All players exchanged cards randomly!',\n          messageDE: '🃏 Karten-Misch-Chaos! Alle Spieler tauschten zufällig Karten!',\n          affectedPlayers: activePlayers.map(p => p.id),\n          specialEffect: 'card_chaos'\n        };\n      }\n    },\n    {\n      id: 'losers_luck',\n      name: '🍀 Loser\\'s Luck Boost!',\n      nameDE: '🍀 Pechvogel Glücksschub!',\n      description: 'Players with fewer chips get a luck bonus!',\n      descriptionDE: 'Spieler mit weniger Chips bekommen einen Glücksbonus!',\n      probability: 0.11,\n      effect: (gameState: GameState): IronicEventResult => {\n        const activePlayers = gameState.players.filter(p => p.isActive && !p.isFolded);\n        if (activePlayers.length === 0) return { success: false, message: 'No active players', messageDE: 'Keine aktiven Spieler' };\n\n        const averageChips = activePlayers.reduce((sum, p) => sum + p.chips, 0) / activePlayers.length;\n        const poorPlayers = activePlayers.filter(p => p.chips < averageChips);\n        \n        if (poorPlayers.length === 0) return { success: false, message: 'No poor players', messageDE: 'Keine armen Spieler' };\n\n        const chipChanges: { [key: string]: number } = {};\n        poorPlayers.forEach(player => {\n          const bonusAmount = Math.floor((averageChips - player.chips) * 0.5) + 50; // 50% of deficit + 50 base\n          player.chips += bonusAmount;\n          chipChanges[player.id] = bonusAmount;\n        });\n\n        return {\n          success: true,\n          message: '🍀 Loser\\'s Luck activated! Players with fewer chips received bonus chips!',\n          messageDE: '🍀 Pechvogel Glück aktiviert! Spieler mit weniger Chips erhielten Bonus-Chips!',\n          affectedPlayers: poorPlayers.map(p => p.id),\n          chipChanges,\n          specialEffect: 'losers_luck'\n        };\n      }\n    }\n  ];\n\n  private static readonly ROULETTE_NUMBERS = [\n    0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27, 13, 36, 11, 30, 8, 23, 10, 5, \n    24, 16, 33, 1, 20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26\n  ];\n\n  public static shouldTriggerEvent(): boolean {\n    const random = Math.random();\n    return random < 0.35; // 35% chance of ANY event happening after each hand\n  }\n\n  public static spinRoulette(): number {\n    return this.ROULETTE_NUMBERS[Math.floor(Math.random() * this.ROULETTE_NUMBERS.length)];\n  }\n\n  public static getRandomEvent(): IronicEvent {\n    // Weighted random selection\n    const totalWeight = this.EVENTS.reduce((sum, event) => sum + event.probability, 0);\n    let random = Math.random() * totalWeight;\n    \n    for (const event of this.EVENTS) {\n      random -= event.probability;\n      if (random <= 0) {\n        return event;\n      }\n    }\n    \n    // Fallback to first event\n    return this.EVENTS[0];\n  }\n\n  public static executeEvent(event: IronicEvent, gameState: GameState): IronicEventResult {\n    console.log(`[IRONIC EVENT] Executing: ${event.name}`);\n    return event.effect(gameState);\n  }\n\n  public static getRouletteBasedEvent(rouletteNumber: number): IronicEvent | null {\n    // Map roulette numbers to specific events for extra fun\n    if (rouletteNumber === 0) return this.EVENTS.find(e => e.id === 'lucky_jackpot') || null;\n    if (rouletteNumber >= 1 && rouletteNumber <= 12) return this.EVENTS.find(e => e.id === 'money_rain') || null;\n    if (rouletteNumber >= 13 && rouletteNumber <= 24) return this.EVENTS.find(e => e.id === 'robin_hood') || null;\n    if (rouletteNumber >= 25 && rouletteNumber <= 36) return this.EVENTS.find(e => e.id === 'market_crash') || null;\n    \n    return null; // Sometimes no event happens\n  }\n\n  public static getAllEvents(): IronicEvent[] {\n    return [...this.EVENTS];\n  }\n}","size_bytes":12130},"client/src/components/poker/IronicEventModal.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useLanguage } from '@/lib/stores/useLanguage';\n\ninterface IronicEventNotification {\n  id: string;\n  name: string;\n  nameDE: string;\n  description: string;\n  descriptionDE: string;\n  timestamp: number;\n  affectedPlayers?: string[];\n  specialEffect?: string;\n}\n\ninterface IronicEventModalProps {\n  event: IronicEventNotification | null;\n  rouletteNumber?: number;\n  onClose: () => void;\n}\n\nconst specialEffectEmojis: Record<string, string> = {\n  money_rain: '💰',\n  robin_hood: '🏹',\n  reverse_world: '🔄',\n  inflation: '📈',\n  crash: '📉',\n  jackpot: '🎰',\n  card_chaos: '🃏',\n  losers_luck: '🍀',\n};\n\nconst getRouletteColor = (number: number): string => {\n  if (number === 0) return 'text-green-400';\n  if ([1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36].includes(number)) {\n    return 'text-red-400';\n  }\n  return 'text-gray-900';\n};\n\nconst getSpecialEffectAnimation = (effect: string) => {\n  switch (effect) {\n    case 'money_rain':\n      return {\n        animate: {\n          scale: [1, 1.2, 1],\n          rotate: [0, 10, -10, 0],\n          y: [-20, 0, -5, 0],\n        },\n        transition: { duration: 2, repeat: 1 }\n      };\n    case 'jackpot':\n      return {\n        animate: {\n          scale: [1, 1.5, 1],\n          rotate: [0, 360],\n        },\n        transition: { duration: 1.5, repeat: 2 }\n      };\n    case 'reverse_world':\n      return {\n        animate: {\n          rotateY: [0, 180, 360],\n          scale: [1, 1.1, 1],\n        },\n        transition: { duration: 2, repeat: 1 }\n      };\n    case 'crash':\n      return {\n        animate: {\n          x: [-10, 10, -5, 5, 0],\n          y: [0, -5, 5, -2, 0],\n        },\n        transition: { duration: 0.8, repeat: 2 }\n      };\n    default:\n      return {\n        animate: {\n          scale: [1, 1.1, 1],\n        },\n        transition: { duration: 1, repeat: 1 }\n      };\n  }\n};\n\nexport const IronicEventModal: React.FC<IronicEventModalProps> = ({\n  event,\n  rouletteNumber,\n  onClose\n}) => {\n  const { t, currentLanguage } = useLanguage();\n  const [showEvent, setShowEvent] = useState(false);\n  const [showRoulette, setShowRoulette] = useState(false);\n\n  useEffect(() => {\n    if (event) {\n      // First show roulette for 2 seconds, then show event\n      setShowRoulette(true);\n      setTimeout(() => {\n        setShowRoulette(false);\n        setShowEvent(true);\n      }, 2000);\n\n      // Auto-close after 6 seconds total\n      setTimeout(() => {\n        onClose();\n      }, 6000);\n    }\n  }, [event, onClose]);\n\n  if (!event) return null;\n\n  const eventName = currentLanguage === 'de' ? event.nameDE : event.name;\n  const eventDescription = currentLanguage === 'de' ? event.descriptionDE : event.description;\n  const effectEmoji = specialEffectEmojis[event.specialEffect || ''] || '🎭';\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 pointer-events-auto\">\n        <motion.div\n          initial={{ opacity: 0, scale: 0.5, y: -50 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          exit={{ opacity: 0, scale: 0.5, y: 50 }}\n          className=\"bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-8 rounded-2xl border-4 border-yellow-500 shadow-2xl max-w-md w-full mx-4 text-center\"\n        >\n          {/* Roulette Display */}\n          <AnimatePresence>\n            {showRoulette && rouletteNumber !== undefined && (\n              <motion.div\n                initial={{ opacity: 0, scale: 0 }}\n                animate={{ opacity: 1, scale: 1, rotate: 360 }}\n                exit={{ opacity: 0, scale: 0 }}\n                transition={{ duration: 1 }}\n                className=\"mb-6\"\n              >\n                <div className=\"text-white text-xl mb-2\">{t('rouletteSpun')}</div>\n                <div className=\"relative\">\n                  <div className=\"w-24 h-24 mx-auto rounded-full border-4 border-yellow-500 bg-green-800 flex items-center justify-center shadow-lg\">\n                    <span className={`text-3xl font-bold ${getRouletteColor(rouletteNumber)}`}>\n                      {rouletteNumber}\n                    </span>\n                  </div>\n                  <div className=\"absolute -top-2 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-b-8 border-transparent border-b-yellow-500\"></div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          {/* Event Display */}\n          <AnimatePresence>\n            {showEvent && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.5 }}\n              >\n                <div className=\"text-yellow-400 text-sm mb-2 uppercase tracking-wider\">\n                  {t('eventTitle')}\n                </div>\n                \n                <motion.div\n                  className=\"text-6xl mb-4\"\n                  {...getSpecialEffectAnimation(event.specialEffect || '')}\n                >\n                  {effectEmoji}\n                </motion.div>\n\n                <motion.h2\n                  className=\"text-2xl font-bold text-white mb-3\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ delay: 1 }}\n                >\n                  {eventName}\n                </motion.h2>\n\n                <motion.p\n                  className=\"text-gray-200 text-lg leading-relaxed mb-4\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ delay: 1.5 }}\n                >\n                  {eventDescription}\n                </motion.p>\n\n                {/* Special Effect Indicator */}\n                {event.specialEffect && (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    transition={{ delay: 2 }}\n                    className=\"mt-4 py-2 px-4 bg-yellow-600 bg-opacity-30 rounded-lg border border-yellow-500\"\n                  >\n                    <div className=\"text-yellow-300 text-sm\">\n                      {event.specialEffect === 'reverse_world' && (\n                        <>🔄 {currentLanguage === 'de' ? 'Umgekehrte Welt aktiv!' : 'Reverse World Active!'}</>\n                      )}\n                      {event.specialEffect === 'inflation' && (\n                        <>📈 {currentLanguage === 'de' ? 'Inflation aktiv!' : 'Inflation Active!'}</>\n                      )}\n                      {event.specialEffect && !['reverse_world', 'inflation'].includes(event.specialEffect) && (\n                        <>✨ {currentLanguage === 'de' ? 'Besonderer Effekt!' : 'Special Effect Active!'}</>\n                      )}\n                    </div>\n                  </motion.div>\n                )}\n\n                {/* Affected Players */}\n                {event.affectedPlayers && event.affectedPlayers.length > 0 && (\n                  <motion.div\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ delay: 2.5 }}\n                    className=\"mt-3 text-gray-400 text-sm\"\n                  >\n                    {currentLanguage === 'de' ? 'Betroffene Spieler:' : 'Players Affected:'} {event.affectedPlayers.length}\n                  </motion.div>\n                )}\n\n                {/* Close Button */}\n                <motion.button\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ delay: 3 }}\n                  onClick={onClose}\n                  className=\"mt-6 px-6 py-2 bg-yellow-600 hover:bg-yellow-700 text-white rounded-lg transition-colors duration-200\"\n                >\n                  {currentLanguage === 'de' ? 'Verstanden' : 'Got it!'}\n                </motion.button>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </motion.div>\n\n        {/* Background particles for extra visual flair */}\n        <div className=\"fixed inset-0 pointer-events-none\">\n          {event.specialEffect === 'money_rain' && (\n            <>\n              {[...Array(20)].map((_, i) => (\n                <motion.div\n                  key={i}\n                  className=\"absolute text-2xl\"\n                  style={{\n                    left: `${Math.random() * 100}%`,\n                    top: '-10%',\n                  }}\n                  animate={{\n                    y: ['0vh', '110vh'],\n                    rotate: [0, 360],\n                  }}\n                  transition={{\n                    duration: 3 + Math.random() * 2,\n                    delay: Math.random() * 2,\n                    repeat: 1,\n                  }}\n                >\n                  💰\n                </motion.div>\n              ))}\n            </>\n          )}\n        </div>\n      </div>\n    </AnimatePresence>\n  );\n};","size_bytes":9123}},"version":1}